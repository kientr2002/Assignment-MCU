
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00002e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb4  08002fb4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fb4  08002fb4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fb4  08002fb4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000005c  08003018  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003018  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf85  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c7  00000000  00000000  0002c00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bce  00000000  00000000  0002f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec2d  00000000  00000000  000473d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084617  00000000  00000000  00056003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a78  00000000  00000000  000da670  2**2
=======
  1 .text         00002f28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003054  08003054  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003054  08003054  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003054  08003054  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800305c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000005c  080030b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080030b8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fa2  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eed  00000000  00000000  0002a027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c45  00000000  00000000  0002d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbe6  00000000  00000000  0004509d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084d43  00000000  00000000  00052c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d79c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae4  00000000  00000000  000d7a1c  2**2
>>>>>>> main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08002f7c 	.word	0x08002f7c
=======
 800012c:	0800301c 	.word	0x0800301c
>>>>>>> main

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
<<<<<<< HEAD
 8000148:	08002f7c 	.word	0x08002f7c
=======
 8000148:	0800301c 	.word	0x0800301c
>>>>>>> main

0800014c <auto_fsm_run>:
 *      Author: 84336
 *      Kien-test
 */
#include "auto_fsm.h"

void auto_fsm_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (status) {
 8000150:	4b66      	ldr	r3, [pc, #408]	; (80002ec <auto_fsm_run+0x1a0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b04      	cmp	r3, #4
 8000158:	f200 80c5 	bhi.w	80002e6 <auto_fsm_run+0x19a>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <auto_fsm_run+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000179 	.word	0x08000179
 8000168:	080001a5 	.word	0x080001a5
 800016c:	080001e9 	.word	0x080001e9
 8000170:	0800022d 	.word	0x0800022d
 8000174:	08000281 	.word	0x08000281

	case INIT:
		Traffic1_Off();
<<<<<<< HEAD
 8000178:	f000 fef6 	bl	8000f68 <Traffic1_Off>
		Traffic2_Off();
 800017c:	f000 ff38 	bl	8000ff0 <Traffic2_Off>
		Traffic3_Off();
 8000180:	f000 fd3c 	bl	8000bfc <Traffic3_Off>
		buzzer_off();
 8000184:	f000 fa6a 	bl	800065c <buzzer_off>
=======
 8000178:	f000 ff3e 	bl	8000ff8 <Traffic1_Off>
		Traffic2_Off();
 800017c:	f000 ff80 	bl	8001080 <Traffic2_Off>
		Traffic3_Off();
 8000180:	f000 fd08 	bl	8000b94 <Traffic3_Off>
>>>>>>> main

		if (Button1_Is_Pressed() == 1) {
 8000188:	f000 f8e4 	bl	8000354 <Button1_Is_Pressed>
 800018c:	4603      	mov	r3, r0
 800018e:	2b01      	cmp	r3, #1
 8000190:	f040 80a0 	bne.w	80002d4 <auto_fsm_run+0x188>
			status = AUTO_RED1_GREEN2;
 8000194:	4b55      	ldr	r3, [pc, #340]	; (80002ec <auto_fsm_run+0x1a0>)
 8000196:	2202      	movs	r2, #2
 8000198:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 800019a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800019e:	f000 fd6d 	bl	8000c7c <SetTimer1>
=======
 8000196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800019a:	f000 fd3b 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		break;
 80001a2:	e097      	b.n	80002d4 <auto_fsm_run+0x188>

	case AUTO_RED1_GREEN2:
		RED_1();
<<<<<<< HEAD
 80001a4:	f000 fea4 	bl	8000ef0 <RED_1>
		GREEN_2();
 80001a8:	f000 ff12 	bl	8000fd0 <GREEN_2>
		GREEN_3();
 80001ac:	f000 fd12 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 80001b0:	f000 fa48 	bl	8000644 <buzzer_ring>
=======
 80001a0:	f000 feee 	bl	8000f80 <RED_1>
		GREEN_2();
 80001a4:	f000 ff5c 	bl	8001060 <GREEN_2>
		GREEN_3();
 80001a8:	f000 fce0 	bl	8000b6c <GREEN_3>
>>>>>>> main

		if (timer1_flag == 1) {
 80001b4:	4b4e      	ldr	r3, [pc, #312]	; (80002f0 <auto_fsm_run+0x1a4>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d108      	bne.n	80001ce <auto_fsm_run+0x82>
			buzzer_off();
 80001bc:	f000 fa4e 	bl	800065c <buzzer_off>
			status = AUTO_RED1_YELLOW2;
 80001c0:	4b4a      	ldr	r3, [pc, #296]	; (80002ec <auto_fsm_run+0x1a0>)
 80001c2:	2203      	movs	r2, #3
 80001c4:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
<<<<<<< HEAD
 80001c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ca:	f000 fd57 	bl	8000c7c <SetTimer1>
=======
 80001ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001be:	f000 fd29 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button1_Is_Pressed() == 1) {
 80001ce:	f000 f8c1 	bl	8000354 <Button1_Is_Pressed>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d17f      	bne.n	80002d8 <auto_fsm_run+0x18c>
			status = MAN_RED1_GREEN2;
 80001d8:	4b44      	ldr	r3, [pc, #272]	; (80002ec <auto_fsm_run+0x1a0>)
 80001da:	220c      	movs	r2, #12
 80001dc:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 80001de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001e2:	f000 fd4b 	bl	8000c7c <SetTimer1>
=======
 80001d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001d6:	f000 fd1d 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		break;
 80001e6:	e077      	b.n	80002d8 <auto_fsm_run+0x18c>

	case AUTO_RED1_YELLOW2:
		RED_1();
<<<<<<< HEAD
 80001e8:	f000 fe82 	bl	8000ef0 <RED_1>
		YELLOW_2();
 80001ec:	f000 fee0 	bl	8000fb0 <YELLOW_2>
		GREEN_3();
 80001f0:	f000 fcf0 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 80001f4:	f000 fa26 	bl	8000644 <buzzer_ring>
=======
 80001dc:	f000 fed0 	bl	8000f80 <RED_1>
		YELLOW_2();
 80001e0:	f000 ff2e 	bl	8001040 <YELLOW_2>
		GREEN_3();
 80001e4:	f000 fcc2 	bl	8000b6c <GREEN_3>
>>>>>>> main

		if (timer1_flag == 1) {
 80001f8:	4b3d      	ldr	r3, [pc, #244]	; (80002f0 <auto_fsm_run+0x1a4>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d108      	bne.n	8000212 <auto_fsm_run+0xc6>
			buzzer_off();
 8000200:	f000 fa2c 	bl	800065c <buzzer_off>
			status = AUTO_GREEN1_RED2;
 8000204:	4b39      	ldr	r3, [pc, #228]	; (80002ec <auto_fsm_run+0x1a0>)
 8000206:	2204      	movs	r2, #4
 8000208:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 800020a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800020e:	f000 fd35 	bl	8000c7c <SetTimer1>
=======
 80001f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001fa:	f000 fd0b 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button1_Is_Pressed() == 1) {
 8000212:	f000 f89f 	bl	8000354 <Button1_Is_Pressed>
 8000216:	4603      	mov	r3, r0
 8000218:	2b01      	cmp	r3, #1
 800021a:	d15f      	bne.n	80002dc <auto_fsm_run+0x190>
			status = MAN_RED1_GREEN2;
<<<<<<< HEAD
 800021c:	4b33      	ldr	r3, [pc, #204]	; (80002ec <auto_fsm_run+0x1a0>)
 800021e:	220c      	movs	r2, #12
 8000220:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000226:	f000 fd29 	bl	8000c7c <SetTimer1>
=======
 8000208:	4b33      	ldr	r3, [pc, #204]	; (80002d8 <auto_fsm_run+0x18c>)
 800020a:	220c      	movs	r2, #12
 800020c:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 800020e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000212:	f000 fcff 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		break;
 800022a:	e057      	b.n	80002dc <auto_fsm_run+0x190>

	case AUTO_GREEN1_RED2:
		GREEN_1();
<<<<<<< HEAD
 800022c:	f000 fe88 	bl	8000f40 <GREEN_1>
		RED_2();
 8000230:	f000 feae 	bl	8000f90 <RED_2>
		RED_3();
 8000234:	f000 fcba 	bl	8000bac <RED_3>
=======
 8000218:	f000 feda 	bl	8000fd0 <GREEN_1>
		RED_2();
 800021c:	f000 ff00 	bl	8001020 <RED_2>
		RED_3();
 8000220:	f000 fc90 	bl	8000b44 <RED_3>
>>>>>>> main

		if (timer1_flag == 1) {
 8000238:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <auto_fsm_run+0x1a4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d106      	bne.n	800024e <auto_fsm_run+0x102>
			status = AUTO_YELLOW1_RED2;
 8000240:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <auto_fsm_run+0x1a0>)
 8000242:	2205      	movs	r2, #5
 8000244:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
<<<<<<< HEAD
 8000246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800024a:	f000 fd17 	bl	8000c7c <SetTimer1>
=======
 8000232:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000236:	f000 fced 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button1_Is_Pressed() == 1) {
 800024e:	f000 f881 	bl	8000354 <Button1_Is_Pressed>
 8000252:	4603      	mov	r3, r0
 8000254:	2b01      	cmp	r3, #1
 8000256:	d106      	bne.n	8000266 <auto_fsm_run+0x11a>
			status = MAN_RED1_GREEN2;
 8000258:	4b24      	ldr	r3, [pc, #144]	; (80002ec <auto_fsm_run+0x1a0>)
 800025a:	220c      	movs	r2, #12
 800025c:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 800025e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000262:	f000 fd0b 	bl	8000c7c <SetTimer1>
=======
 800024a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800024e:	f000 fce1 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button4_Is_Pressed() == 1) {
 8000266:	f000 f8ab 	bl	80003c0 <Button4_Is_Pressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d137      	bne.n	80002e0 <auto_fsm_run+0x194>
			status = PED_RED1_RED2;
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <auto_fsm_run+0x1a0>)
 8000272:	2220      	movs	r2, #32
 8000274:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 8000276:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800027a:	f000 fcff 	bl	8000c7c <SetTimer1>
=======
 8000262:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000266:	f000 fcd5 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		break;
 800027e:	e02f      	b.n	80002e0 <auto_fsm_run+0x194>

	case AUTO_YELLOW1_RED2:
		YELLOW_1();
<<<<<<< HEAD
 8000280:	f000 fe4a 	bl	8000f18 <YELLOW_1>
		RED_2();
 8000284:	f000 fe84 	bl	8000f90 <RED_2>
		RED_3();
 8000288:	f000 fc90 	bl	8000bac <RED_3>
=======
 800026c:	f000 fe9c 	bl	8000fa8 <YELLOW_1>
		RED_2();
 8000270:	f000 fed6 	bl	8001020 <RED_2>
		RED_3();
 8000274:	f000 fc66 	bl	8000b44 <RED_3>
>>>>>>> main

		if (timer1_flag == 1) {
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <auto_fsm_run+0x1a4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d106      	bne.n	80002a2 <auto_fsm_run+0x156>
			status = AUTO_RED1_GREEN2;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <auto_fsm_run+0x1a0>)
 8000296:	2202      	movs	r2, #2
 8000298:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
<<<<<<< HEAD
 800029a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800029e:	f000 fced 	bl	8000c7c <SetTimer1>
=======
 8000286:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800028a:	f000 fcc3 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button1_Is_Pressed() == 1) {
 80002a2:	f000 f857 	bl	8000354 <Button1_Is_Pressed>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d106      	bne.n	80002ba <auto_fsm_run+0x16e>
			status = MAN_RED1_GREEN2;
<<<<<<< HEAD
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <auto_fsm_run+0x1a0>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80002b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b6:	f000 fce1 	bl	8000c7c <SetTimer1>
=======
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <auto_fsm_run+0x18c>)
 800029a:	220c      	movs	r2, #12
 800029c:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 800029e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002a2:	f000 fcb7 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if (Button4_Is_Pressed() == 1) {
 80002ba:	f000 f881 	bl	80003c0 <Button4_Is_Pressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d10f      	bne.n	80002e4 <auto_fsm_run+0x198>
			status = PED_RED1_RED2;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <auto_fsm_run+0x1a0>)
 80002c6:	2220      	movs	r2, #32
 80002c8:	601a      	str	r2, [r3, #0]
			SetTimer2(2000);
<<<<<<< HEAD
 80002ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ce:	f000 fcf1 	bl	8000cb4 <SetTimer2>
=======
 80002b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ba:	f000 fcc7 	bl	8000c4c <SetTimer2>
>>>>>>> main
		}
		break;
 80002d2:	e007      	b.n	80002e4 <auto_fsm_run+0x198>
		break;
 80002d4:	bf00      	nop
 80002d6:	e006      	b.n	80002e6 <auto_fsm_run+0x19a>
		break;
 80002d8:	bf00      	nop
 80002da:	e004      	b.n	80002e6 <auto_fsm_run+0x19a>
		break;
 80002dc:	bf00      	nop
 80002de:	e002      	b.n	80002e6 <auto_fsm_run+0x19a>
		break;
 80002e0:	bf00      	nop
 80002e2:	e000      	b.n	80002e6 <auto_fsm_run+0x19a>
		break;
 80002e4:	bf00      	nop
	}
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000088 	.word	0x20000088
 80002f0:	2000008c 	.word	0x2000008c

080002f4 <SubKeyProcess1>:
int KeyReg13 = NORMAL_STATE;
int KeyReg14 = NORMAL_STATE;
int KeyReg15 = NORMAL_STATE;
int TimerForKeyPress4 = 100;

void SubKeyProcess1() {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SubKeyProcess1+0x14>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000078 	.word	0x20000078

0800030c <SubKeyProcess2>:

void SubKeyProcess2() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <SubKeyProcess2+0x14>)
 8000312:	2201      	movs	r2, #1
 8000314:	601a      	str	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000007c 	.word	0x2000007c

08000324 <SubKeyProcess3>:

void SubKeyProcess3() {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <SubKeyProcess3+0x14>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	20000080 	.word	0x20000080

0800033c <SubKeyProcess4>:

void SubKeyProcess4() {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	button4_flag = 1;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <SubKeyProcess4+0x14>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000084 	.word	0x20000084

08000354 <Button1_Is_Pressed>:

int Button1_Is_Pressed () {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <Button1_Is_Pressed+0x20>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d104      	bne.n	800036a <Button1_Is_Pressed+0x16>
		button1_flag = 0;
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <Button1_Is_Pressed+0x20>)
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
		return 1;
 8000366:	2301      	movs	r3, #1
 8000368:	e000      	b.n	800036c <Button1_Is_Pressed+0x18>
	}
	return 0;
 800036a:	2300      	movs	r3, #0
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	20000078 	.word	0x20000078

08000378 <Button2_Is_Pressed>:

int Button2_Is_Pressed () {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <Button2_Is_Pressed+0x20>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d104      	bne.n	800038e <Button2_Is_Pressed+0x16>
		button2_flag = 0;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <Button2_Is_Pressed+0x20>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
		return 1;
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <Button2_Is_Pressed+0x18>
	}
	return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	2000007c 	.word	0x2000007c

0800039c <Button3_Is_Pressed>:

int Button3_Is_Pressed () {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <Button3_Is_Pressed+0x20>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d104      	bne.n	80003b2 <Button3_Is_Pressed+0x16>
		button3_flag = 0;
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <Button3_Is_Pressed+0x20>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
		return 1;
 80003ae:	2301      	movs	r3, #1
 80003b0:	e000      	b.n	80003b4 <Button3_Is_Pressed+0x18>
	}
	return 0;
 80003b2:	2300      	movs	r3, #0
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	20000080 	.word	0x20000080

080003c0 <Button4_Is_Pressed>:

int Button4_Is_Pressed () {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	if (button4_flag == 1) {
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <Button4_Is_Pressed+0x20>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d104      	bne.n	80003d6 <Button4_Is_Pressed+0x16>
		button4_flag = 0;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <Button4_Is_Pressed+0x20>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
		return 1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <Button4_Is_Pressed+0x18>
	}
	return 0;
 80003d6:	2300      	movs	r3, #0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	20000084 	.word	0x20000084

080003e4 <GetKeyInput1>:

void GetKeyInput1() {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <GetKeyInput1+0x80>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <GetKeyInput1+0x84>)
 80003ee:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <GetKeyInput1+0x88>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <GetKeyInput1+0x80>)
 80003f6:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
<<<<<<< HEAD
 80003f8:	2102      	movs	r1, #2
 80003fa:	481d      	ldr	r0, [pc, #116]	; (8000470 <GetKeyInput1+0x8c>)
 80003fc:	f001 fa1c 	bl	8001838 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <GetKeyInput1+0x88>)
 8000406:	601a      	str	r2, [r3, #0]
=======
 80003e4:	2102      	movs	r1, #2
 80003e6:	481d      	ldr	r0, [pc, #116]	; (800045c <GetKeyInput1+0x8c>)
 80003e8:	f001 fa76 	bl	80018d8 <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <GetKeyInput1+0x88>)
 80003f2:	601a      	str	r2, [r3, #0]
>>>>>>> main
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <GetKeyInput1+0x84>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <GetKeyInput1+0x80>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	d125      	bne.n	8000460 <GetKeyInput1+0x7c>
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <GetKeyInput1+0x80>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <GetKeyInput1+0x88>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	429a      	cmp	r2, r3
 800041e:	d11f      	bne.n	8000460 <GetKeyInput1+0x7c>
		if (KeyReg3 != KeyReg2) {
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <GetKeyInput1+0x90>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <GetKeyInput1+0x88>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d00d      	beq.n	8000448 <GetKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <GetKeyInput1+0x88>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a10      	ldr	r2, [pc, #64]	; (8000474 <GetKeyInput1+0x90>)
 8000432:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE) {
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <GetKeyInput1+0x88>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d111      	bne.n	8000460 <GetKeyInput1+0x7c>
				SubKeyProcess1();
 800043c:	f7ff ff5a 	bl	80002f4 <SubKeyProcess1>
				TimerForKeyPress1 = 100;
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <GetKeyInput1+0x94>)
 8000442:	2264      	movs	r2, #100	; 0x64
 8000444:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress1 == 0) {
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 8000446:	e00b      	b.n	8000460 <GetKeyInput1+0x7c>
			TimerForKeyPress1--;
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <GetKeyInput1+0x94>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <GetKeyInput1+0x94>)
 8000450:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1 == 0) {
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <GetKeyInput1+0x94>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d102      	bne.n	8000460 <GetKeyInput1+0x7c>
				KeyReg3 = NORMAL_STATE;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <GetKeyInput1+0x90>)
 800045c:	2201      	movs	r2, #1
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000004 	.word	0x20000004
 8000468:	20000000 	.word	0x20000000
 800046c:	20000008 	.word	0x20000008
 8000470:	40010800 	.word	0x40010800
 8000474:	2000000c 	.word	0x2000000c
 8000478:	20000010 	.word	0x20000010

0800047c <GetKeyInput2>:

void GetKeyInput2() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 8000480:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <GetKeyInput2+0x80>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1e      	ldr	r2, [pc, #120]	; (8000500 <GetKeyInput2+0x84>)
 8000486:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <GetKeyInput2+0x88>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <GetKeyInput2+0x80>)
 800048e:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
<<<<<<< HEAD
 8000490:	2110      	movs	r1, #16
 8000492:	481d      	ldr	r0, [pc, #116]	; (8000508 <GetKeyInput2+0x8c>)
 8000494:	f001 f9d0 	bl	8001838 <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <GetKeyInput2+0x88>)
 800049e:	601a      	str	r2, [r3, #0]
=======
 800047c:	2110      	movs	r1, #16
 800047e:	481d      	ldr	r0, [pc, #116]	; (80004f4 <GetKeyInput2+0x8c>)
 8000480:	f001 fa2a 	bl	80018d8 <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <GetKeyInput2+0x88>)
 800048a:	601a      	str	r2, [r3, #0]
>>>>>>> main
	if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)) {
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <GetKeyInput2+0x84>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <GetKeyInput2+0x80>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d125      	bne.n	80004f8 <GetKeyInput2+0x7c>
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <GetKeyInput2+0x80>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <GetKeyInput2+0x88>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d11f      	bne.n	80004f8 <GetKeyInput2+0x7c>
		if (KeyReg7 != KeyReg6) {
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <GetKeyInput2+0x90>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <GetKeyInput2+0x88>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d00d      	beq.n	80004e0 <GetKeyInput2+0x64>
			KeyReg7 = KeyReg6;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <GetKeyInput2+0x88>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <GetKeyInput2+0x90>)
 80004ca:	6013      	str	r3, [r2, #0]
			if (KeyReg6 == PRESSED_STATE) {
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <GetKeyInput2+0x88>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <GetKeyInput2+0x7c>
				SubKeyProcess2();
 80004d4:	f7ff ff1a 	bl	800030c <SubKeyProcess2>
				TimerForKeyPress2 = 100;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <GetKeyInput2+0x94>)
 80004da:	2264      	movs	r2, #100	; 0x64
 80004dc:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress2 == 0) {
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 80004de:	e00b      	b.n	80004f8 <GetKeyInput2+0x7c>
			TimerForKeyPress2--;
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <GetKeyInput2+0x94>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <GetKeyInput2+0x94>)
 80004e8:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 == 0) {
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <GetKeyInput2+0x94>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <GetKeyInput2+0x7c>
				KeyReg7 = NORMAL_STATE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <GetKeyInput2+0x90>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000018 	.word	0x20000018
 8000500:	20000014 	.word	0x20000014
 8000504:	2000001c 	.word	0x2000001c
 8000508:	40010800 	.word	0x40010800
 800050c:	20000020 	.word	0x20000020
 8000510:	20000024 	.word	0x20000024

08000514 <GetKeyInput3>:

void GetKeyInput3() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <GetKeyInput3+0x80>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <GetKeyInput3+0x84>)
 800051e:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <GetKeyInput3+0x88>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <GetKeyInput3+0x80>)
 8000526:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
<<<<<<< HEAD
 8000528:	2101      	movs	r1, #1
 800052a:	481d      	ldr	r0, [pc, #116]	; (80005a0 <GetKeyInput3+0x8c>)
 800052c:	f001 f984 	bl	8001838 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <GetKeyInput3+0x88>)
 8000536:	601a      	str	r2, [r3, #0]
=======
 8000514:	2101      	movs	r1, #1
 8000516:	481d      	ldr	r0, [pc, #116]	; (800058c <GetKeyInput3+0x8c>)
 8000518:	f001 f9de 	bl	80018d8 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <GetKeyInput3+0x88>)
 8000522:	601a      	str	r2, [r3, #0]
>>>>>>> main
	if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)) {
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <GetKeyInput3+0x84>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <GetKeyInput3+0x80>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	d125      	bne.n	8000590 <GetKeyInput3+0x7c>
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <GetKeyInput3+0x80>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <GetKeyInput3+0x88>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	429a      	cmp	r2, r3
 800054e:	d11f      	bne.n	8000590 <GetKeyInput3+0x7c>
		if (KeyReg11 != KeyReg10) {
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <GetKeyInput3+0x90>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <GetKeyInput3+0x88>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	429a      	cmp	r2, r3
 800055a:	d00d      	beq.n	8000578 <GetKeyInput3+0x64>
			KeyReg11 = KeyReg10;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <GetKeyInput3+0x88>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <GetKeyInput3+0x90>)
 8000562:	6013      	str	r3, [r2, #0]
			if (KeyReg10 == PRESSED_STATE) {
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <GetKeyInput3+0x88>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d111      	bne.n	8000590 <GetKeyInput3+0x7c>
				SubKeyProcess3();
 800056c:	f7ff feda 	bl	8000324 <SubKeyProcess3>
				TimerForKeyPress3 = 100;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <GetKeyInput3+0x94>)
 8000572:	2264      	movs	r2, #100	; 0x64
 8000574:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress3 == 0) {
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 8000576:	e00b      	b.n	8000590 <GetKeyInput3+0x7c>
			TimerForKeyPress3--;
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <GetKeyInput3+0x94>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <GetKeyInput3+0x94>)
 8000580:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3 == 0) {
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <GetKeyInput3+0x94>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d102      	bne.n	8000590 <GetKeyInput3+0x7c>
				KeyReg11 = NORMAL_STATE;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <GetKeyInput3+0x90>)
 800058c:	2201      	movs	r2, #1
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000028 	.word	0x20000028
 800059c:	20000030 	.word	0x20000030
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	20000034 	.word	0x20000034
 80005a8:	20000038 	.word	0x20000038

080005ac <GetKeyInput4>:

void GetKeyInput4() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	KeyReg12 = KeyReg13;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <GetKeyInput4+0x80>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <GetKeyInput4+0x84>)
 80005b6:	6013      	str	r3, [r2, #0]
	KeyReg13 = KeyReg14;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <GetKeyInput4+0x88>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <GetKeyInput4+0x80>)
 80005be:	6013      	str	r3, [r2, #0]
	KeyReg14 = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
<<<<<<< HEAD
 80005c0:	2101      	movs	r1, #1
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <GetKeyInput4+0x8c>)
 80005c4:	f001 f938 	bl	8001838 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <GetKeyInput4+0x88>)
 80005ce:	601a      	str	r2, [r3, #0]
=======
 80005ac:	2101      	movs	r1, #1
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <GetKeyInput4+0x8c>)
 80005b0:	f001 f992 	bl	80018d8 <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <GetKeyInput4+0x88>)
 80005ba:	601a      	str	r2, [r3, #0]
>>>>>>> main
	if ((KeyReg12 == KeyReg13) && (KeyReg13 == KeyReg14)) {
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <GetKeyInput4+0x84>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <GetKeyInput4+0x80>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d125      	bne.n	8000628 <GetKeyInput4+0x7c>
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <GetKeyInput4+0x80>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <GetKeyInput4+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d11f      	bne.n	8000628 <GetKeyInput4+0x7c>
		if (KeyReg15 != KeyReg14) {
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <GetKeyInput4+0x90>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <GetKeyInput4+0x88>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d00d      	beq.n	8000610 <GetKeyInput4+0x64>
			KeyReg15 = KeyReg14;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <GetKeyInput4+0x88>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <GetKeyInput4+0x90>)
 80005fa:	6013      	str	r3, [r2, #0]
			if (KeyReg14 == PRESSED_STATE) {
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <GetKeyInput4+0x88>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d111      	bne.n	8000628 <GetKeyInput4+0x7c>
				SubKeyProcess4();
 8000604:	f7ff fe9a 	bl	800033c <SubKeyProcess4>
				TimerForKeyPress4 = 100;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <GetKeyInput4+0x94>)
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress4 == 0) {
				KeyReg15 = NORMAL_STATE;
			}
		}
	}
}
 800060e:	e00b      	b.n	8000628 <GetKeyInput4+0x7c>
			TimerForKeyPress4--;
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <GetKeyInput4+0x94>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <GetKeyInput4+0x94>)
 8000618:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress4 == 0) {
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <GetKeyInput4+0x94>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <GetKeyInput4+0x7c>
				KeyReg15 = NORMAL_STATE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <GetKeyInput4+0x90>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000040 	.word	0x20000040
 8000630:	2000003c 	.word	0x2000003c
 8000634:	20000044 	.word	0x20000044
 8000638:	40010800 	.word	0x40010800
 800063c:	20000048 	.word	0x20000048
 8000640:	2000004c 	.word	0x2000004c

08000644 <buzzer_ring>:
 *  Created on: Dec 13, 2022
 *      Author: ADMIN
 */
#include "buzzer.h"

void buzzer_ring() {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 10);
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <buzzer_ring+0x14>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	220a      	movs	r2, #10
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_Delay(1000);
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	2000009c 	.word	0x2000009c

0800065c <buzzer_off>:

void buzzer_off() {
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1);
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <buzzer_off+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2201      	movs	r2, #1
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
	//HAL_Delay(1000);
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000009c 	.word	0x2000009c

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000678:	f000 fdea 	bl	8001250 <HAL_Init>
=======
 8000634:	f000 fe38 	bl	80012a8 <HAL_Init>
>>>>>>> main
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800067c:	f000 f820 	bl	80006c0 <SystemClock_Config>
=======
 8000638:	f000 f824 	bl	8000684 <SystemClock_Config>
>>>>>>> main
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000680:	f000 f922 	bl	80008c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000684:	f000 f85e 	bl	8000744 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000688:	f000 f8a8 	bl	80007dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	4809      	ldr	r0, [pc, #36]	; (80006b4 <main+0x40>)
 8000690:	f001 fde4 	bl	800225c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0x44>)
 8000696:	f001 fd37 	bl	8002108 <HAL_TIM_Base_Start_IT>
=======
 800063c:	f000 f926 	bl	800088c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000640:	f000 f862 	bl	8000708 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000644:	f000 f8ac 	bl	80007a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x48>)
 800064a:	f001 fdad 	bl	80021a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <main+0x4c>)
 8000652:	f001 fe53 	bl	80022fc <HAL_TIM_PWM_Start>
>>>>>>> main
//  htim3.Instance->CCR1 = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(500);
 8000656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065a:	f000 fe87 	bl	800136c <HAL_Delay>
  status = INIT;
<<<<<<< HEAD
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <main+0x48>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  auto_fsm_run();
 80006a0:	f7ff fd54 	bl	800014c <auto_fsm_run>
	  man_fsm_run();
 80006a4:	f000 f996 	bl	80009d4 <man_fsm_run>
	  tun_fsm_run();
 80006a8:	f000 fcb2 	bl	8001010 <tun_fsm_run>
	  ped_fsm_run();
 80006ac:	f000 faba 	bl	8000c24 <ped_fsm_run>
	  auto_fsm_run();
 80006b0:	e7f6      	b.n	80006a0 <main+0x2c>
 80006b2:	bf00      	nop
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	200000e4 	.word	0x200000e4
 80006bc:	20000088 	.word	0x20000088

080006c0 <SystemClock_Config>:
=======
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <main+0x50>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  auto_fsm_run();
 8000664:	f7ff fd72 	bl	800014c <auto_fsm_run>
	  man_fsm_run();
 8000668:	f000 f9a2 	bl	80009b0 <man_fsm_run>
	  tun_fsm_run();
 800066c:	f000 fd18 	bl	80010a0 <tun_fsm_run>
	  ped_fsm_run();
 8000670:	f000 faa4 	bl	8000bbc <ped_fsm_run>
	  auto_fsm_run();
 8000674:	e7f6      	b.n	8000664 <main+0x34>
 8000676:	bf00      	nop
 8000678:	20000108 	.word	0x20000108
 800067c:	200000c0 	.word	0x200000c0
 8000680:	20000088 	.word	0x20000088

08000684 <SystemClock_Config>:
>>>>>>> main
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	; 0x40
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fc4c 	bl	8002f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
=======
 8000684:	b580      	push	{r7, lr}
 8000686:	b090      	sub	sp, #64	; 0x40
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fcba 	bl	800300c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
>>>>>>> main

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0318 	add.w	r3, r7, #24
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f8c9 	bl	8001898 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800070c:	f000 f95c 	bl	80009c8 <Error_Handler>
=======
 80006a6:	2302      	movs	r3, #2
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2310      	movs	r3, #16
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006b6:	2300      	movs	r3, #0
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f937 	bl	8001938 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006d0:	f000 f968 	bl	80009a4 <Error_Handler>
>>>>>>> main
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000710:	230f      	movs	r3, #15
 8000712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fb34 	bl	8001d98 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000736:	f000 f947 	bl	80009c8 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3740      	adds	r7, #64	; 0x40
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <MX_TIM2_Init>:
=======
 80006d4:	230f      	movs	r3, #15
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fba2 	bl	8001e38 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006fa:	f000 f953 	bl	80009a4 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3740      	adds	r7, #64	; 0x40
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_TIM2_Init>:
>>>>>>> main
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
=======
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
=======
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
>>>>>>> main

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM2_Init+0x94>)
 800076a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800076e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000778:	2209      	movs	r2, #9
 800077a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_TIM2_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_TIM2_Init+0x94>)
 800078a:	f001 fc6d 	bl	8002068 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000794:	f000 f918 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_TIM2_Init+0x94>)
 80007a6:	f001 ffc1 	bl	800272c <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007b0:	f000 f90a 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM2_Init+0x94>)
 80007c2:	f002 fb3f 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007cc:	f000 f8fc 	bl	80009c8 <Error_Handler>
=======
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_TIM2_Init+0x94>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_TIM2_Init+0x94>)
 800072e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_TIM2_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_TIM2_Init+0x94>)
 800073c:	2209      	movs	r2, #9
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_TIM2_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_TIM2_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074c:	4813      	ldr	r0, [pc, #76]	; (800079c <MX_TIM2_Init+0x94>)
 800074e:	f001 fcdb 	bl	8002108 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000758:	f000 f924 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_TIM2_Init+0x94>)
 800076a:	f002 f82f 	bl	80027cc <HAL_TIM_ConfigClockSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000774:	f000 f916 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_TIM2_Init+0x94>)
 8000786:	f002 fbad 	bl	8002ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000790:	f000 f908 	bl	80009a4 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000e4 	.word	0x200000e4

080007dc <MX_TIM3_Init>:
=======
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000108 	.word	0x20000108

080007a0 <MX_TIM3_Init>:
>>>>>>> main
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
=======
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80007e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]
 800080a:	619a      	str	r2, [r3, #24]
=======
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]
>>>>>>> main

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_TIM3_Init+0xe4>)
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_TIM3_Init+0xe8>)
 8000810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000814:	223f      	movs	r2, #63	; 0x3f
 8000816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_TIM3_Init+0xe4>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_TIM3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000832:	4823      	ldr	r0, [pc, #140]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000834:	f001 fc18 	bl	8002068 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800083e:	f000 f8c3 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084c:	4619      	mov	r1, r3
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000850:	f001 ff6c 	bl	800272c <HAL_TIM_ConfigClockSource>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800085a:	f000 f8b5 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800085e:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM3_Init+0xe4>)
 8000860:	f001 fca4 	bl	80021ac <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800086a:	f000 f8ad 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	4619      	mov	r1, r3
 800087c:	4810      	ldr	r0, [pc, #64]	; (80008c0 <MX_TIM3_Init+0xe4>)
 800087e:	f002 fae1 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000888:	f000 f89e 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088c:	2360      	movs	r3, #96	; 0x60
 800088e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM3_Init+0xe4>)
 80008a4:	f001 fe84 	bl	80025b0 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008ae:	f000 f88b 	bl	80009c8 <Error_Handler>
=======
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007d2:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <MX_TIM3_Init+0xe8>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007d8:	223f      	movs	r2, #63	; 0x3f
 80007da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007f6:	4823      	ldr	r0, [pc, #140]	; (8000884 <MX_TIM3_Init+0xe4>)
 80007f8:	f001 fc86 	bl	8002108 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000802:	f000 f8cf 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000810:	4619      	mov	r1, r3
 8000812:	481c      	ldr	r0, [pc, #112]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000814:	f001 ffda 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800081e:	f000 f8c1 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000824:	f001 fd12 	bl	800224c <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800082e:	f000 f8b9 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000842:	f002 fb4f 	bl	8002ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800084c:	f000 f8aa 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000868:	f001 fef2 	bl	8002650 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000872:	f000 f897 	bl	80009a4 <Error_Handler>
>>>>>>> main
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 80008b2:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM3_Init+0xe4>)
 80008b4:	f000 fab2 	bl	8000e1c <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	; 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000009c 	.word	0x2000009c
 80008c4:	40000400 	.word	0x40000400

080008c8 <MX_GPIO_Init>:
=======
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM3_Init+0xe4>)
 8000878:	f000 fafa 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	; 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000c0 	.word	0x200000c0
 8000888:	40000400 	.word	0x40000400

0800088c <MX_GPIO_Init>:
>>>>>>> main
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a27      	ldr	r2, [pc, #156]	; (8000998 <MX_GPIO_Init+0xd0>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_GPIO_Init+0xd0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0xd4>)
 8000914:	f000 ffa7 	bl	8001866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800091e:	4820      	ldr	r0, [pc, #128]	; (80009a0 <MX_GPIO_Init+0xd8>)
 8000920:	f000 ffa1 	bl	8001866 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000924:	2313      	movs	r3, #19
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	481a      	ldr	r0, [pc, #104]	; (80009a0 <MX_GPIO_Init+0xd8>)
 8000938:	f000 fdfa 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0xd4>)
 8000950:	f000 fdee 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000954:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0xd4>)
 800096e:	f000 fddf 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000972:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2302      	movs	r3, #2
 8000982:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0xd8>)
 800098c:	f000 fdd0 	bl	8001530 <HAL_GPIO_Init>

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40010800 	.word	0x40010800

080009a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	TimerRun();
 80009ac:	f000 f99e 	bl	8000cec <TimerRun>
	GetKeyInput1();
 80009b0:	f7ff fd18 	bl	80003e4 <GetKeyInput1>
	GetKeyInput2();
 80009b4:	f7ff fd62 	bl	800047c <GetKeyInput2>
	GetKeyInput3();
 80009b8:	f7ff fdac 	bl	8000514 <GetKeyInput3>
	GetKeyInput4();
 80009bc:	f7ff fdf6 	bl	80005ac <GetKeyInput4>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Error_Handler>:
=======
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a33      	ldr	r2, [pc, #204]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0xe8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D12_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0xec>)
 80008f0:	f001 f809 	bl	8001906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80008fa:	4820      	ldr	r0, [pc, #128]	; (800097c <MX_GPIO_Init+0xf0>)
 80008fc:	f001 f803 	bl	8001906 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000900:	2313      	movs	r3, #19
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	; (8000978 <MX_GPIO_Init+0xec>)
 8000914:	f000 fe5c 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D7_Pin|D2_Pin;
 8000918:	f44f 63a8 	mov.w	r3, #1344	; 0x540
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_GPIO_Init+0xec>)
 8000932:	f000 fe4d 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_GPIO_Init+0xf0>)
 800094a:	f000 fe41 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800094e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0xf0>)
 8000968:	f000 fe32 	bl	80015d0 <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	40010c00 	.word	0x40010c00

08000980 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	TimerRun();
 8000988:	f000 f97c 	bl	8000c84 <TimerRun>
	GetKeyInput1();
 800098c:	f7ff fd20 	bl	80003d0 <GetKeyInput1>
	GetKeyInput2();
 8000990:	f7ff fd6a 	bl	8000468 <GetKeyInput2>
	GetKeyInput3();
 8000994:	f7ff fdb4 	bl	8000500 <GetKeyInput3>
	GetKeyInput4();
 8000998:	f7ff fdfe 	bl	8000598 <GetKeyInput4>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Error_Handler>:
>>>>>>> main
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
=======
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
>>>>>>> main
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
=======
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
>>>>>>> main
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <man_fsm_run>:
=======
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <man_fsm_run>:
>>>>>>> main
 *  Created on: Dec 5, 2022
 *      Author: 84336
 */
#include "man_fsm.h"

void man_fsm_run() {
<<<<<<< HEAD
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	switch (status) {
 80009d8:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <man_fsm_run+0x1d0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3b0c      	subs	r3, #12
 80009de:	2b03      	cmp	r3, #3
 80009e0:	f200 80de 	bhi.w	8000ba0 <man_fsm_run+0x1cc>
 80009e4:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <man_fsm_run+0x18>)
 80009e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ea:	bf00      	nop
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a5b 	.word	0x08000a5b
 80009f4:	08000ab3 	.word	0x08000ab3
 80009f8:	08000b23 	.word	0x08000b23

	case MAN_RED1_GREEN2:
		RED_1();
 80009fc:	f000 fa78 	bl	8000ef0 <RED_1>
		GREEN_2();
 8000a00:	f000 fae6 	bl	8000fd0 <GREEN_2>
		GREEN_3();
 8000a04:	f000 f8e6 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 8000a08:	f7ff fe1c 	bl	8000644 <buzzer_ring>

		if (timer1_flag == 1) {
 8000a0c:	4b66      	ldr	r3, [pc, #408]	; (8000ba8 <man_fsm_run+0x1d4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <man_fsm_run+0x52>
			buzzer_off();
 8000a14:	f7ff fe22 	bl	800065c <buzzer_off>
			status = AUTO_RED1_YELLOW2;
 8000a18:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000a1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a22:	f000 f92b 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000a26:	f7ff fc95 	bl	8000354 <Button1_Is_Pressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d106      	bne.n	8000a3e <man_fsm_run+0x6a>
			status = TUN_RED1_GREEN2;
 8000a30:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000a32:	2216      	movs	r2, #22
 8000a34:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000a36:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a3a:	f000 f91f 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1){
 8000a3e:	f7ff fc9b 	bl	8000378 <Button2_Is_Pressed>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	f040 80a4 	bne.w	8000b92 <man_fsm_run+0x1be>
			status = MAN_RED1_YELLOW2;
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000a4c:	220d      	movs	r2, #13
 8000a4e:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a54:	f000 f912 	bl	8000c7c <SetTimer1>
		}
		break;
 8000a58:	e09b      	b.n	8000b92 <man_fsm_run+0x1be>

	case MAN_RED1_YELLOW2:
		YELLOW_2();
 8000a5a:	f000 faa9 	bl	8000fb0 <YELLOW_2>
		RED_1();
 8000a5e:	f000 fa47 	bl	8000ef0 <RED_1>
		GREEN_3();
 8000a62:	f000 f8b7 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 8000a66:	f7ff fded 	bl	8000644 <buzzer_ring>

		if (timer1_flag == 1) {
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <man_fsm_run+0x1d4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d106      	bne.n	8000a80 <man_fsm_run+0xac>
			status = AUTO_GREEN1_RED2;
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000a74:	2204      	movs	r2, #4
 8000a76:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000a78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a7c:	f000 f8fe 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000a80:	f7ff fc68 	bl	8000354 <Button1_Is_Pressed>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d106      	bne.n	8000a98 <man_fsm_run+0xc4>
			status = TUN_RED1_GREEN2;
 8000a8a:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000a8c:	2216      	movs	r2, #22
 8000a8e:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000a90:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a94:	f000 f8f2 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000a98:	f7ff fc6e 	bl	8000378 <Button2_Is_Pressed>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d179      	bne.n	8000b96 <man_fsm_run+0x1c2>
			status = MAN_GREEN1_RED2;
 8000aa2:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000aa4:	220e      	movs	r2, #14
 8000aa6:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000aa8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000aac:	f000 f8e6 	bl	8000c7c <SetTimer1>
		}
		break;
 8000ab0:	e071      	b.n	8000b96 <man_fsm_run+0x1c2>

	case MAN_GREEN1_RED2:
		GREEN_1();
 8000ab2:	f000 fa45 	bl	8000f40 <GREEN_1>
		RED_2();
 8000ab6:	f000 fa6b 	bl	8000f90 <RED_2>
		RED_3();
 8000aba:	f000 f877 	bl	8000bac <RED_3>
		buzzer_off();
 8000abe:	f7ff fdcd 	bl	800065c <buzzer_off>

		if (timer1_flag == 1) {
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <man_fsm_run+0x1d4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d106      	bne.n	8000ad8 <man_fsm_run+0x104>
			status = AUTO_YELLOW1_RED2;
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000acc:	2205      	movs	r2, #5
 8000ace:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000ad0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ad4:	f000 f8d2 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000ad8:	f7ff fc3c 	bl	8000354 <Button1_Is_Pressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d106      	bne.n	8000af0 <man_fsm_run+0x11c>
			status = TUN_RED1_GREEN2;
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000ae4:	2216      	movs	r2, #22
 8000ae6:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000ae8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aec:	f000 f8c6 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000af0:	f7ff fc42 	bl	8000378 <Button2_Is_Pressed>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d106      	bne.n	8000b08 <man_fsm_run+0x134>
			status = MAN_YELLOW1_RED2;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000afc:	220f      	movs	r2, #15
 8000afe:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000b00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b04:	f000 f8ba 	bl	8000c7c <SetTimer1>
		}
		if(Button4_Is_Pressed() == 1)
 8000b08:	f7ff fc5a 	bl	80003c0 <Button4_Is_Pressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d143      	bne.n	8000b9a <man_fsm_run+0x1c6>
		{
			status = PED_RED1_RED2;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000b14:	2220      	movs	r2, #32
 8000b16:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000b18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b1c:	f000 f8ae 	bl	8000c7c <SetTimer1>
		}
		break;
 8000b20:	e03b      	b.n	8000b9a <man_fsm_run+0x1c6>

	case MAN_YELLOW1_RED2:
		YELLOW_1();
 8000b22:	f000 f9f9 	bl	8000f18 <YELLOW_1>
		RED_2();
 8000b26:	f000 fa33 	bl	8000f90 <RED_2>
		RED_3();
 8000b2a:	f000 f83f 	bl	8000bac <RED_3>
		buzzer_off();
 8000b2e:	f7ff fd95 	bl	800065c <buzzer_off>

		if (timer1_flag == 1) {
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <man_fsm_run+0x1d4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d106      	bne.n	8000b48 <man_fsm_run+0x174>
			status = AUTO_RED1_GREEN2;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b44:	f000 f89a 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000b48:	f7ff fc04 	bl	8000354 <Button1_Is_Pressed>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d106      	bne.n	8000b60 <man_fsm_run+0x18c>
			status = TUN_RED1_GREEN2;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000b54:	2216      	movs	r2, #22
 8000b56:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000b58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b5c:	f000 f88e 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000b60:	f7ff fc0a 	bl	8000378 <Button2_Is_Pressed>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d106      	bne.n	8000b78 <man_fsm_run+0x1a4>
			status = MAN_RED1_GREEN2;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000b70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b74:	f000 f882 	bl	8000c7c <SetTimer1>
		}
		if(Button4_Is_Pressed() == 1)
 8000b78:	f7ff fc22 	bl	80003c0 <Button4_Is_Pressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d10d      	bne.n	8000b9e <man_fsm_run+0x1ca>
				{
					status = PED_RED1_RED2;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <man_fsm_run+0x1d0>)
 8000b84:	2220      	movs	r2, #32
 8000b86:	601a      	str	r2, [r3, #0]
					SetTimer1(3000);
 8000b88:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b8c:	f000 f876 	bl	8000c7c <SetTimer1>
				}
		break;
 8000b90:	e005      	b.n	8000b9e <man_fsm_run+0x1ca>
		break;
 8000b92:	bf00      	nop
 8000b94:	e004      	b.n	8000ba0 <man_fsm_run+0x1cc>
		break;
 8000b96:	bf00      	nop
 8000b98:	e002      	b.n	8000ba0 <man_fsm_run+0x1cc>
		break;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <man_fsm_run+0x1cc>
		break;
 8000b9e:	bf00      	nop
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000088 	.word	0x20000088
 8000ba8:	2000008c 	.word	0x2000008c

08000bac <RED_3>:
=======
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	switch (status) {
 80009b4:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <man_fsm_run+0x18c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b0c      	subs	r3, #12
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	f200 80bc 	bhi.w	8000b38 <man_fsm_run+0x188>
 80009c0:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <man_fsm_run+0x18>)
 80009c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c6:	bf00      	nop
 80009c8:	080009d9 	.word	0x080009d9
 80009cc:	08000a2f 	.word	0x08000a2f
 80009d0:	08000a83 	.word	0x08000a83
 80009d4:	08000ad7 	.word	0x08000ad7

	case MAN_RED1_GREEN2:
		RED_1();
 80009d8:	f000 fad2 	bl	8000f80 <RED_1>
		GREEN_2();
 80009dc:	f000 fb40 	bl	8001060 <GREEN_2>
		GREEN_3();
 80009e0:	f000 f8c4 	bl	8000b6c <GREEN_3>

		if (timer1_flag == 1) {
 80009e4:	4b56      	ldr	r3, [pc, #344]	; (8000b40 <man_fsm_run+0x190>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <man_fsm_run+0x4a>
			status = AUTO_RED1_YELLOW2;
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <man_fsm_run+0x18c>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 80009f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f6:	f000 f90d 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80009fa:	f7ff fca1 	bl	8000340 <Button1_Is_Pressed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <man_fsm_run+0x62>
			status = TUN_RED1_GREEN2;
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <man_fsm_run+0x18c>)
 8000a06:	2216      	movs	r2, #22
 8000a08:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000a0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a0e:	f000 f901 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1){
 8000a12:	f7ff fca7 	bl	8000364 <Button2_Is_Pressed>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f040 8086 	bne.w	8000b2a <man_fsm_run+0x17a>
			status = MAN_RED1_YELLOW2;
 8000a1e:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <man_fsm_run+0x18c>)
 8000a20:	220d      	movs	r2, #13
 8000a22:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000a24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a28:	f000 f8f4 	bl	8000c14 <SetTimer1>
		}
		break;
 8000a2c:	e07d      	b.n	8000b2a <man_fsm_run+0x17a>

	case MAN_RED1_YELLOW2:
		YELLOW_2();
 8000a2e:	f000 fb07 	bl	8001040 <YELLOW_2>
		RED_1();
 8000a32:	f000 faa5 	bl	8000f80 <RED_1>
		GREEN_3();
 8000a36:	f000 f899 	bl	8000b6c <GREEN_3>

		if (timer1_flag == 1) {
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <man_fsm_run+0x190>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d106      	bne.n	8000a50 <man_fsm_run+0xa0>
			status = AUTO_GREEN1_RED2;
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <man_fsm_run+0x18c>)
 8000a44:	2204      	movs	r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000a48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a4c:	f000 f8e2 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000a50:	f7ff fc76 	bl	8000340 <Button1_Is_Pressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d106      	bne.n	8000a68 <man_fsm_run+0xb8>
			status = TUN_RED1_GREEN2;
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <man_fsm_run+0x18c>)
 8000a5c:	2216      	movs	r2, #22
 8000a5e:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000a60:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a64:	f000 f8d6 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000a68:	f7ff fc7c 	bl	8000364 <Button2_Is_Pressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d15d      	bne.n	8000b2e <man_fsm_run+0x17e>
			status = MAN_GREEN1_RED2;
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <man_fsm_run+0x18c>)
 8000a74:	220e      	movs	r2, #14
 8000a76:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000a78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a7c:	f000 f8ca 	bl	8000c14 <SetTimer1>
		}
		break;
 8000a80:	e055      	b.n	8000b2e <man_fsm_run+0x17e>

	case MAN_GREEN1_RED2:
		GREEN_1();
 8000a82:	f000 faa5 	bl	8000fd0 <GREEN_1>
		RED_2();
 8000a86:	f000 facb 	bl	8001020 <RED_2>
		RED_3();
 8000a8a:	f000 f85b 	bl	8000b44 <RED_3>

		if (timer1_flag == 1) {
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <man_fsm_run+0x190>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d106      	bne.n	8000aa4 <man_fsm_run+0xf4>
			status = AUTO_YELLOW1_RED2;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <man_fsm_run+0x18c>)
 8000a98:	2205      	movs	r2, #5
 8000a9a:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000a9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa0:	f000 f8b8 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000aa4:	f7ff fc4c 	bl	8000340 <Button1_Is_Pressed>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d106      	bne.n	8000abc <man_fsm_run+0x10c>
			status = TUN_RED1_GREEN2;
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <man_fsm_run+0x18c>)
 8000ab0:	2216      	movs	r2, #22
 8000ab2:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000ab4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ab8:	f000 f8ac 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000abc:	f7ff fc52 	bl	8000364 <Button2_Is_Pressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d135      	bne.n	8000b32 <man_fsm_run+0x182>
			status = MAN_YELLOW1_RED2;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <man_fsm_run+0x18c>)
 8000ac8:	220f      	movs	r2, #15
 8000aca:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000acc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ad0:	f000 f8a0 	bl	8000c14 <SetTimer1>
		}
		break;
 8000ad4:	e02d      	b.n	8000b32 <man_fsm_run+0x182>

	case MAN_YELLOW1_RED2:
		YELLOW_1();
 8000ad6:	f000 fa67 	bl	8000fa8 <YELLOW_1>
		RED_2();
 8000ada:	f000 faa1 	bl	8001020 <RED_2>
		RED_3();
 8000ade:	f000 f831 	bl	8000b44 <RED_3>

		if (timer1_flag == 1) {
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <man_fsm_run+0x190>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d106      	bne.n	8000af8 <man_fsm_run+0x148>
			status = AUTO_RED1_GREEN2;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <man_fsm_run+0x18c>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000af4:	f000 f88e 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8000af8:	f7ff fc22 	bl	8000340 <Button1_Is_Pressed>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d106      	bne.n	8000b10 <man_fsm_run+0x160>
			status = TUN_RED1_GREEN2;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <man_fsm_run+0x18c>)
 8000b04:	2216      	movs	r2, #22
 8000b06:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8000b08:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b0c:	f000 f882 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8000b10:	f7ff fc28 	bl	8000364 <Button2_Is_Pressed>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10d      	bne.n	8000b36 <man_fsm_run+0x186>
			status = MAN_RED1_GREEN2;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <man_fsm_run+0x18c>)
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b24:	f000 f876 	bl	8000c14 <SetTimer1>
		}
		break;
 8000b28:	e005      	b.n	8000b36 <man_fsm_run+0x186>
		break;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <man_fsm_run+0x188>
		break;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <man_fsm_run+0x188>
		break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <man_fsm_run+0x188>
		break;
 8000b36:	bf00      	nop
	}
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000088 	.word	0x20000088
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <RED_3>:
>>>>>>> main
 *      Author: Admin
 */

#include "pdtlight1.h"

void RED_3() {
<<<<<<< HEAD
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <RED_3+0x20>)
 8000bb8:	f000 fe55 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc2:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <RED_3+0x24>)
 8000bc4:	f000 fe4f 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <GREEN_3>:

void GREEN_3() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <GREEN_3+0x20>)
 8000be0:	f000 fe41 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <GREEN_3+0x24>)
 8000bec:	f000 fe3b 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <Traffic3_Off>:

void Traffic3_Off() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <Traffic3_Off+0x20>)
 8000c08:	f000 fe2d 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <Traffic3_Off+0x24>)
 8000c14:	f000 fe27 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <ped_fsm_run>:
=======
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <RED_3+0x20>)
 8000b50:	f000 fed9 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <RED_3+0x24>)
 8000b5c:	f000 fed3 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <GREEN_3>:

void GREEN_3() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <GREEN_3+0x20>)
 8000b78:	f000 fec5 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <GREEN_3+0x24>)
 8000b84:	f000 febf 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <Traffic3_Off>:

void Traffic3_Off() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <Traffic3_Off+0x20>)
 8000ba0:	f000 feb1 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <Traffic3_Off+0x24>)
 8000bac:	f000 feab 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <ped_fsm_run>:
>>>>>>> main
 *  Created on: Dec 6, 2022
 *      Author: Admin
 */
#include "ped_fsm.h"

void ped_fsm_run() {
<<<<<<< HEAD
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	switch (status) {
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <ped_fsm_run+0x4c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d11c      	bne.n	8000c6a <ped_fsm_run+0x46>

	case PED_RED1_RED2:
		RED_1();
 8000c30:	f000 f95e 	bl	8000ef0 <RED_1>
		RED_2();
 8000c34:	f000 f9ac 	bl	8000f90 <RED_2>
		GREEN_3();
 8000c38:	f7ff ffcc 	bl	8000bd4 <GREEN_3>
		// buzzer_ring()

		if (timer1_flag == 1) {
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <ped_fsm_run+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d106      	bne.n	8000c52 <ped_fsm_run+0x2e>
			status = AUTO_YELLOW1_RED2;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <ped_fsm_run+0x4c>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000c4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c4e:	f000 f815 	bl	8000c7c <SetTimer1>
		}
		if (timer2_flag == 1) {
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <ped_fsm_run+0x54>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d106      	bne.n	8000c68 <ped_fsm_run+0x44>
			status = AUTO_RED1_GREEN2;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <ped_fsm_run+0x4c>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000c60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c64:	f000 f80a 	bl	8000c7c <SetTimer1>
		}
		break;
 8000c68:	bf00      	nop
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000088 	.word	0x20000088
 8000c74:	2000008c 	.word	0x2000008c
 8000c78:	20000094 	.word	0x20000094

08000c7c <SetTimer1>:
#include "software_timer.h"

int timer1_flag = 0, timer1_counter = 0;
int timer2_flag = 0, timer2_counter = 0;

void SetTimer1 (int duration) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <SetTimer1+0x2c>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1092      	asrs	r2, r2, #2
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <SetTimer1+0x30>)
 8000c94:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SetTimer1+0x34>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	66666667 	.word	0x66666667
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	2000008c 	.word	0x2000008c

08000cb4 <SetTimer2>:

void SetTimer2 (int duration) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <SetTimer2+0x2c>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1092      	asrs	r2, r2, #2
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <SetTimer2+0x30>)
 8000ccc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <SetTimer2+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	66666667 	.word	0x66666667
 8000ce4:	20000098 	.word	0x20000098
 8000ce8:	20000094 	.word	0x20000094

08000cec <TimerRun>:

void TimerRun () {
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <TimerRun+0x4c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dd0b      	ble.n	8000d10 <TimerRun+0x24>
		timer1_counter--;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <TimerRun+0x4c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <TimerRun+0x4c>)
 8000d00:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <TimerRun+0x4c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dc02      	bgt.n	8000d10 <TimerRun+0x24>
			timer1_flag = 1;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <TimerRun+0x50>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <TimerRun+0x54>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dd0b      	ble.n	8000d30 <TimerRun+0x44>
			timer2_counter--;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <TimerRun+0x54>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <TimerRun+0x54>)
 8000d20:	6013      	str	r3, [r2, #0]
			if (timer2_counter <= 0) {
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimerRun+0x54>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	dc02      	bgt.n	8000d30 <TimerRun+0x44>
				timer2_flag = 1;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <TimerRun+0x58>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000090 	.word	0x20000090
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	20000098 	.word	0x20000098
 8000d44:	20000094 	.word	0x20000094

08000d48 <HAL_MspInit>:
=======
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	switch (status) {
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <ped_fsm_run+0x4c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b20      	cmp	r3, #32
 8000bc6:	d11c      	bne.n	8000c02 <ped_fsm_run+0x46>

	case PED_RED1_RED2:
		RED_1();
 8000bc8:	f000 f9da 	bl	8000f80 <RED_1>
		RED_2();
 8000bcc:	f000 fa28 	bl	8001020 <RED_2>
		GREEN_3();
 8000bd0:	f7ff ffcc 	bl	8000b6c <GREEN_3>
		// buzzer_ring()

		if (timer1_flag == 1) {
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <ped_fsm_run+0x50>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d106      	bne.n	8000bea <ped_fsm_run+0x2e>
			status = AUTO_YELLOW1_RED2;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <ped_fsm_run+0x4c>)
 8000bde:	2205      	movs	r2, #5
 8000be0:	601a      	str	r2, [r3, #0]
			SetTimer1(2000);
 8000be2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be6:	f000 f815 	bl	8000c14 <SetTimer1>
		}
		if (timer2_flag == 1) {
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <ped_fsm_run+0x54>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d106      	bne.n	8000c00 <ped_fsm_run+0x44>
			status = AUTO_RED1_GREEN2;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <ped_fsm_run+0x4c>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8000bf8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000bfc:	f000 f80a 	bl	8000c14 <SetTimer1>
		}
		break;
 8000c00:	bf00      	nop
	}
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000088 	.word	0x20000088
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	20000094 	.word	0x20000094

08000c14 <SetTimer1>:
int timer_red_flag = 0, timer_red_counter = 0;
int timer_yellow_counter = 0, timer_yellow_flag = 0;
int timer_green_counter = 0, timer_green_flag = 0;
int timer_pedes_counter = 0, timer_pedes_flag = 0;

void SetTimer1 (int duration) {
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <SetTimer1+0x2c>)
 8000c20:	fb82 1203 	smull	r1, r2, r2, r3
 8000c24:	1092      	asrs	r2, r2, #2
 8000c26:	17db      	asrs	r3, r3, #31
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <SetTimer1+0x30>)
 8000c2c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SetTimer1+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	66666667 	.word	0x66666667
 8000c44:	20000090 	.word	0x20000090
 8000c48:	2000008c 	.word	0x2000008c

08000c4c <SetTimer2>:

void SetTimer2 (int duration) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <SetTimer2+0x2c>)
 8000c58:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5c:	1092      	asrs	r2, r2, #2
 8000c5e:	17db      	asrs	r3, r3, #31
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <SetTimer2+0x30>)
 8000c64:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SetTimer2+0x34>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	66666667 	.word	0x66666667
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	20000094 	.word	0x20000094

08000c84 <TimerRun>:

void TimerRun () {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <TimerRun+0x98>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dd0b      	ble.n	8000ca8 <TimerRun+0x24>
		timer1_counter--;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <TimerRun+0x98>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <TimerRun+0x98>)
 8000c98:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <TimerRun+0x98>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dc02      	bgt.n	8000ca8 <TimerRun+0x24>
			timer1_flag = 1;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <TimerRun+0x9c>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <TimerRun+0xa0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd0b      	ble.n	8000cc8 <TimerRun+0x44>
			timer2_counter--;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <TimerRun+0xa0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <TimerRun+0xa0>)
 8000cb8:	6013      	str	r3, [r2, #0]
			if (timer2_counter <= 0) {
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <TimerRun+0xa0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dc02      	bgt.n	8000cc8 <TimerRun+0x44>
				timer2_flag = 1;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <TimerRun+0xa4>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
			}
		}
	if (timer_red_counter  <= 0) {
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <TimerRun+0xa8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dc02      	bgt.n	8000cd6 <TimerRun+0x52>
			timer_red_flag = 1;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <TimerRun+0xac>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
		}
	if (timer_yellow_counter <= 0) {
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <TimerRun+0xb0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dc02      	bgt.n	8000ce4 <TimerRun+0x60>
			timer_yellow_flag = 1;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <TimerRun+0xb4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
		}
	if (timer_green_counter <= 0) {
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <TimerRun+0xb8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dc02      	bgt.n	8000cf2 <TimerRun+0x6e>
			timer_green_flag = 1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <TimerRun+0xbc>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
		}
	if (timer_pedes_counter > 0) {
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <TimerRun+0xc0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	dd0b      	ble.n	8000d12 <TimerRun+0x8e>
		timer_pedes_counter--;
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <TimerRun+0xc0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <TimerRun+0xc0>)
 8000d02:	6013      	str	r3, [r2, #0]
		if (timer_pedes_counter <= 0) {
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <TimerRun+0xc0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	dc02      	bgt.n	8000d12 <TimerRun+0x8e>
			timer_pedes_flag = 1;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <TimerRun+0xc4>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000090 	.word	0x20000090
 8000d20:	2000008c 	.word	0x2000008c
 8000d24:	20000098 	.word	0x20000098
 8000d28:	20000094 	.word	0x20000094
 8000d2c:	200000a0 	.word	0x200000a0
 8000d30:	2000009c 	.word	0x2000009c
 8000d34:	200000a4 	.word	0x200000a4
 8000d38:	200000a8 	.word	0x200000a8
 8000d3c:	200000ac 	.word	0x200000ac
 8000d40:	200000b0 	.word	0x200000b0
 8000d44:	200000b4 	.word	0x200000b4
 8000d48:	200000b8 	.word	0x200000b8

08000d4c <IncYellow2s>:
	timer_red_counter = duration / TICK;
	timer_red_counter--;
	timer_red_flag = 0;
}

void IncYellow2s (int duration) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	timer_yellow_counter = duration / TICK;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <IncYellow2s+0x34>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1092      	asrs	r2, r2, #2
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <IncYellow2s+0x38>)
 8000d64:	6013      	str	r3, [r2, #0]
	timer_yellow_counter--;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <IncYellow2s+0x38>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <IncYellow2s+0x38>)
 8000d6e:	6013      	str	r3, [r2, #0]
	timer_yellow_flag = 0;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <IncYellow2s+0x3c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	66666667 	.word	0x66666667
 8000d84:	200000a4 	.word	0x200000a4
 8000d88:	200000a8 	.word	0x200000a8

08000d8c <HAL_MspInit>:
>>>>>>> main
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
=======
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
=======
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
>>>>>>> main

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x60>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_MspInit+0x60>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6053      	str	r3, [r2, #4]
=======
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x60>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_MspInit+0x60>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6053      	str	r3, [r2, #4]
>>>>>>> main

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000

08000dac <HAL_TIM_Base_MspInit>:
=======
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000

08000df0 <HAL_TIM_Base_MspInit>:
>>>>>>> main
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dbc:	d114      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x3c>
=======
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e00:	d114      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201c      	movs	r0, #28
 8000ddc:	f000 fb71 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de0:	201c      	movs	r0, #28
 8000de2:	f000 fb8a 	bl	80014fa <HAL_NVIC_EnableIRQ>
=======
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 fb9f 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e24:	201c      	movs	r0, #28
 8000e26:	f000 fbb8 	bl	800159a <HAL_NVIC_EnableIRQ>
>>>>>>> main
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000de6:	e010      	b.n	8000e0a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_TIM_Base_MspInit+0x6c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40000400 	.word	0x40000400

08000e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_TIM_MspPostInit+0x58>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d117      	bne.n	8000e6c <HAL_TIM_MspPostInit+0x50>
=======
 8000e2a:	e018      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_TIM_Base_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201d      	movs	r0, #29
 8000e54:	f000 fb85 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f000 fb9e 	bl	800159a <HAL_NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000400 	.word	0x40000400

08000e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_TIM_MspPostInit+0x7c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d129      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x74>
>>>>>>> main
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

<<<<<<< HEAD
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_TIM_MspPostInit+0x5c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_TIM_MspPostInit+0x5c>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_TIM_MspPostInit+0x5c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
=======
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_TIM_MspPostInit+0x80>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_TIM_MspPostInit+0x80>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_TIM_MspPostInit+0x80>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
>>>>>>> main
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
<<<<<<< HEAD
    GPIO_InitStruct.Pin = D12_Pin;
 8000e54:	2340      	movs	r3, #64	; 0x40
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_TIM_MspPostInit+0x60>)
 8000e68:	f000 fb62 	bl	8001530 <HAL_GPIO_Init>
=======
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_TIM_MspPostInit+0x84>)
 8000ebc:	f000 fb88 	bl	80015d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_TIM_MspPostInit+0x88>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_TIM_MspPostInit+0x88>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	6053      	str	r3, [r2, #4]
>>>>>>> main
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40000400 	.word	0x40000400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800

08000e80 <NMI_Handler>:
=======
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40000400 	.word	0x40000400
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40010000 	.word	0x40010000

08000efc <NMI_Handler>:
>>>>>>> main
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
=======
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:
=======
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
=======
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:
=======
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:
>>>>>>> main

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
=======
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:
=======
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
=======
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:
=======
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
=======
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:
=======
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:
>>>>>>> main

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
=======
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:
=======
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:
>>>>>>> main

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
=======
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:
=======
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:
>>>>>>> main

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
=======
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <SysTick_Handler>:
=======
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:
>>>>>>> main

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
=======
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000ec6:	f000 fa09 	bl	80012dc <HAL_IncTick>
=======
 8000f42:	f000 f9f7 	bl	8001334 <HAL_IncTick>
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <TIM2_IRQHandler>:
=======
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <TIM2_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
=======
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM2_IRQHandler+0x10>)
 8000ed6:	f001 fa63 	bl	80023a0 <HAL_TIM_IRQHandler>
=======
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM2_IRQHandler+0x10>)
 8000f52:	f001 fa75 	bl	8002440 <HAL_TIM_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000e4 	.word	0x200000e4

08000ee4 <SystemInit>:
=======
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000108 	.word	0x20000108

08000f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <TIM3_IRQHandler+0x10>)
 8000f66:	f001 fa6b 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000c0 	.word	0x200000c0

08000f74 <SystemInit>:
>>>>>>> main
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
=======
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
>>>>>>> main

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <RED_1>:
=======
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <RED_1>:
>>>>>>> main
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic1.h"

void RED_1() {
<<<<<<< HEAD
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <RED_1+0x20>)
 8000efa:	f000 fcb4 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <RED_1+0x24>)
 8000f06:	f000 fcae 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40010800 	.word	0x40010800

08000f18 <YELLOW_1>:

void YELLOW_1() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2108      	movs	r1, #8
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <YELLOW_1+0x20>)
 8000f22:	f000 fca0 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <YELLOW_1+0x24>)
 8000f2e:	f000 fc9a 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40010800 	.word	0x40010800

08000f40 <GREEN_1>:

void GREEN_1() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2108      	movs	r1, #8
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <GREEN_1+0x20>)
 8000f4a:	f000 fc8c 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <GREEN_1+0x24>)
 8000f56:	f000 fc86 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	40010800 	.word	0x40010800

08000f68 <Traffic1_Off>:

void Traffic1_Off() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <Traffic1_Off+0x20>)
 8000f72:	f000 fc78 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <Traffic1_Off+0x24>)
 8000f7e:	f000 fc72 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40010800 	.word	0x40010800

08000f90 <RED_2>:
=======
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2108      	movs	r1, #8
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <RED_1+0x20>)
 8000f8a:	f000 fcbc 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <RED_1+0x24>)
 8000f96:	f000 fcb6 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010c00 	.word	0x40010c00
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <YELLOW_1>:

void YELLOW_1() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2108      	movs	r1, #8
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <YELLOW_1+0x20>)
 8000fb2:	f000 fca8 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <YELLOW_1+0x24>)
 8000fbe:	f000 fca2 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <GREEN_1>:

void GREEN_1() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <GREEN_1+0x20>)
 8000fda:	f000 fc94 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <GREEN_1+0x24>)
 8000fe6:	f000 fc8e 	bl	8001906 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <Traffic1_Off>:

void Traffic1_Off() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2108      	movs	r1, #8
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <Traffic1_Off+0x20>)
 8001002:	f000 fc80 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <Traffic1_Off+0x24>)
 800100e:	f000 fc7a 	bl	8001906 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010c00 	.word	0x40010c00
 800101c:	40010800 	.word	0x40010800

08001020 <RED_2>:
>>>>>>> main
 *  Created on: Nov 30, 2022
 *      Author: 84336
 */
#include "traffic2.h"

void RED_2() {
<<<<<<< HEAD
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <RED_2+0x1c>)
 8000f9a:	f000 fc64 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <RED_2+0x1c>)
 8000fa4:	f000 fc5f 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <YELLOW_2>:

void YELLOW_2() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <YELLOW_2+0x1c>)
 8000fba:	f000 fc54 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <YELLOW_2+0x1c>)
 8000fc4:	f000 fc4f 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010c00 	.word	0x40010c00

08000fd0 <GREEN_2>:

void GREEN_2() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <GREEN_2+0x1c>)
 8000fda:	f000 fc44 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4802      	ldr	r0, [pc, #8]	; (8000fec <GREEN_2+0x1c>)
 8000fe4:	f000 fc3f 	bl	8001866 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <Traffic2_Off>:

void Traffic2_Off() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <Traffic2_Off+0x1c>)
 8000ffa:	f000 fc34 	bl	8001866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2110      	movs	r1, #16
 8001002:	4802      	ldr	r0, [pc, #8]	; (800100c <Traffic2_Off+0x1c>)
 8001004:	f000 fc2f 	bl	8001866 <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010c00 	.word	0x40010c00

08001010 <tun_fsm_run>:
=======
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2120      	movs	r1, #32
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <RED_2+0x1c>)
 800102a:	f000 fc6c 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2110      	movs	r1, #16
 8001032:	4802      	ldr	r0, [pc, #8]	; (800103c <RED_2+0x1c>)
 8001034:	f000 fc67 	bl	8001906 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010c00 	.word	0x40010c00

08001040 <YELLOW_2>:

void YELLOW_2() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <YELLOW_2+0x1c>)
 800104a:	f000 fc5c 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <YELLOW_2+0x1c>)
 8001054:	f000 fc57 	bl	8001906 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40010c00 	.word	0x40010c00

08001060 <GREEN_2>:

void GREEN_2() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <GREEN_2+0x1c>)
 800106a:	f000 fc4c 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2110      	movs	r1, #16
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <GREEN_2+0x1c>)
 8001074:	f000 fc47 	bl	8001906 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010c00 	.word	0x40010c00

08001080 <Traffic2_Off>:

void Traffic2_Off() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2120      	movs	r1, #32
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <Traffic2_Off+0x1c>)
 800108a:	f000 fc3c 	bl	8001906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <Traffic2_Off+0x1c>)
 8001094:	f000 fc37 	bl	8001906 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010c00 	.word	0x40010c00

080010a0 <tun_fsm_run>:
>>>>>>> main
 *  Created on: Dec 6, 2022
 *      Author: ADMIN
 */
#include "tun_fsm.h"

void tun_fsm_run(){
<<<<<<< HEAD
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	switch(status) {
 8001014:	4b79      	ldr	r3, [pc, #484]	; (80011fc <tun_fsm_run+0x1ec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b16      	subs	r3, #22
 800101a:	2b03      	cmp	r3, #3
 800101c:	f200 80ec 	bhi.w	80011f8 <tun_fsm_run+0x1e8>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <tun_fsm_run+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001039 	.word	0x08001039
 800102c:	0800109d 	.word	0x0800109d
 8001030:	080010f7 	.word	0x080010f7
 8001034:	08001171 	.word	0x08001171

	case TUN_RED1_GREEN2:
		RED_1();
 8001038:	f7ff ff5a 	bl	8000ef0 <RED_1>
		GREEN_2();
 800103c:	f7ff ffc8 	bl	8000fd0 <GREEN_2>
		GREEN_3();
 8001040:	f7ff fdc8 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 8001044:	f7ff fafe 	bl	8000644 <buzzer_ring>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 8001048:	4b6d      	ldr	r3, [pc, #436]	; (8001200 <tun_fsm_run+0x1f0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d004      	beq.n	800105a <tun_fsm_run+0x4a>
 8001050:	f7ff f9a4 	bl	800039c <Button3_Is_Pressed>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d106      	bne.n	8001068 <tun_fsm_run+0x58>
			status = TUN_RED1_GREEN2;
 800105a:	4b68      	ldr	r3, [pc, #416]	; (80011fc <tun_fsm_run+0x1ec>)
 800105c:	2216      	movs	r2, #22
 800105e:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8001060:	f242 7010 	movw	r0, #10000	; 0x2710
 8001064:	f7ff fe0a 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8001068:	f7ff f974 	bl	8000354 <Button1_Is_Pressed>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d106      	bne.n	8001080 <tun_fsm_run+0x70>
			status = AUTO_RED1_GREEN2;
 8001072:	4b62      	ldr	r3, [pc, #392]	; (80011fc <tun_fsm_run+0x1ec>)
 8001074:	2202      	movs	r2, #2
 8001076:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8001078:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800107c:	f7ff fdfe 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8001080:	f7ff f97a 	bl	8000378 <Button2_Is_Pressed>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	f040 80af 	bne.w	80011ea <tun_fsm_run+0x1da>
			status = TUN_RED1_YELLOW2;
 800108c:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <tun_fsm_run+0x1ec>)
 800108e:	2217      	movs	r2, #23
 8001090:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8001092:	f242 7010 	movw	r0, #10000	; 0x2710
 8001096:	f7ff fdf1 	bl	8000c7c <SetTimer1>
		}
		break;
 800109a:	e0a6      	b.n	80011ea <tun_fsm_run+0x1da>

	case TUN_RED1_YELLOW2:
		RED_1();
 800109c:	f7ff ff28 	bl	8000ef0 <RED_1>
		YELLOW_2();
 80010a0:	f7ff ff86 	bl	8000fb0 <YELLOW_2>
		GREEN_3();
 80010a4:	f7ff fd96 	bl	8000bd4 <GREEN_3>
		buzzer_ring();
 80010a8:	f7ff facc 	bl	8000644 <buzzer_ring>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <tun_fsm_run+0x1f0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d004      	beq.n	80010be <tun_fsm_run+0xae>
 80010b4:	f7ff f972 	bl	800039c <Button3_Is_Pressed>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d106      	bne.n	80010cc <tun_fsm_run+0xbc>
			status = TUN_RED1_YELLOW2;
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <tun_fsm_run+0x1ec>)
 80010c0:	2217      	movs	r2, #23
 80010c2:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 80010c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80010c8:	f7ff fdd8 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80010cc:	f7ff f942 	bl	8000354 <Button1_Is_Pressed>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d106      	bne.n	80010e4 <tun_fsm_run+0xd4>
			status = AUTO_RED1_GREEN2;
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <tun_fsm_run+0x1ec>)
 80010d8:	2202      	movs	r2, #2
 80010da:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80010dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e0:	f7ff fdcc 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 80010e4:	f7ff f948 	bl	8000378 <Button2_Is_Pressed>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d17f      	bne.n	80011ee <tun_fsm_run+0x1de>
			status = TUN_GREEN1_RED2;
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <tun_fsm_run+0x1ec>)
 80010f0:	2218      	movs	r2, #24
 80010f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80010f4:	e07b      	b.n	80011ee <tun_fsm_run+0x1de>

	case TUN_GREEN1_RED2:
		GREEN_1();
 80010f6:	f7ff ff23 	bl	8000f40 <GREEN_1>
		YELLOW_2();
 80010fa:	f7ff ff59 	bl	8000fb0 <YELLOW_2>
		RED_3();
 80010fe:	f7ff fd55 	bl	8000bac <RED_3>
		buzzer_off();
 8001102:	f7ff faab 	bl	800065c <buzzer_off>
		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <tun_fsm_run+0x1f0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d004      	beq.n	8001118 <tun_fsm_run+0x108>
 800110e:	f7ff f945 	bl	800039c <Button3_Is_Pressed>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d106      	bne.n	8001126 <tun_fsm_run+0x116>
			status = TUN_GREEN1_RED2;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <tun_fsm_run+0x1ec>)
 800111a:	2218      	movs	r2, #24
 800111c:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 800111e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001122:	f7ff fdab 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8001126:	f7ff f915 	bl	8000354 <Button1_Is_Pressed>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <tun_fsm_run+0x12e>
			status = AUTO_RED1_GREEN2;
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <tun_fsm_run+0x1ec>)
 8001132:	2202      	movs	r2, #2
 8001134:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8001136:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800113a:	f7ff fd9f 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 800113e:	f7ff f91b 	bl	8000378 <Button2_Is_Pressed>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <tun_fsm_run+0x146>
			status = TUN_YELLOW1_RED2;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <tun_fsm_run+0x1ec>)
 800114a:	2219      	movs	r2, #25
 800114c:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 800114e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001152:	f7ff fd93 	bl	8000c7c <SetTimer1>
=======
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	switch(status) {
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <tun_fsm_run+0x1b4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3b16      	subs	r3, #22
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	f200 80d0 	bhi.w	8001250 <tun_fsm_run+0x1b0>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <tun_fsm_run+0x18>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	08001129 	.word	0x08001129
 80010c0:	08001187 	.word	0x08001187
 80010c4:	080011e5 	.word	0x080011e5

	case TUN_RED1_GREEN2:
		RED_1();
 80010c8:	f7ff ff5a 	bl	8000f80 <RED_1>
		GREEN_2();
 80010cc:	f7ff ffc8 	bl	8001060 <GREEN_2>
		GREEN_3();
 80010d0:	f7ff fd4c 	bl	8000b6c <GREEN_3>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <tun_fsm_run+0x1b8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d004      	beq.n	80010e6 <tun_fsm_run+0x46>
 80010dc:	f7ff f954 	bl	8000388 <Button3_Is_Pressed>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d106      	bne.n	80010f4 <tun_fsm_run+0x54>
			status = TUN_RED1_GREEN2;
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <tun_fsm_run+0x1b4>)
 80010e8:	2216      	movs	r2, #22
 80010ea:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 80010ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80010f0:	f7ff fd90 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80010f4:	f7ff f924 	bl	8000340 <Button1_Is_Pressed>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d106      	bne.n	800110c <tun_fsm_run+0x6c>
			status = AUTO_RED1_GREEN2;
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <tun_fsm_run+0x1b4>)
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8001104:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001108:	f7ff fd84 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 800110c:	f7ff f92a 	bl	8000364 <Button2_Is_Pressed>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 8095 	bne.w	8001242 <tun_fsm_run+0x1a2>
			status = TUN_RED1_YELLOW2;
 8001118:	4b4e      	ldr	r3, [pc, #312]	; (8001254 <tun_fsm_run+0x1b4>)
 800111a:	2217      	movs	r2, #23
 800111c:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 800111e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001122:	f7ff fd77 	bl	8000c14 <SetTimer1>
		}
		break;
 8001126:	e08c      	b.n	8001242 <tun_fsm_run+0x1a2>

	case TUN_RED1_YELLOW2:
		RED_1();
 8001128:	f7ff ff2a 	bl	8000f80 <RED_1>
		YELLOW_2();
 800112c:	f7ff ff88 	bl	8001040 <YELLOW_2>
		GREEN_3();
 8001130:	f7ff fd1c 	bl	8000b6c <GREEN_3>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <tun_fsm_run+0x1b8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d004      	beq.n	8001146 <tun_fsm_run+0xa6>
 800113c:	f7ff f924 	bl	8000388 <Button3_Is_Pressed>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d106      	bne.n	8001154 <tun_fsm_run+0xb4>
			status = TUN_RED1_YELLOW2;
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <tun_fsm_run+0x1b4>)
 8001148:	2217      	movs	r2, #23
 800114a:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 800114c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001150:	f7ff fd60 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8001154:	f7ff f8f4 	bl	8000340 <Button1_Is_Pressed>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d106      	bne.n	800116c <tun_fsm_run+0xcc>
			status = AUTO_RED1_GREEN2;
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <tun_fsm_run+0x1b4>)
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8001164:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001168:	f7ff fd54 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 800116c:	f7ff f8fa 	bl	8000364 <Button2_Is_Pressed>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d167      	bne.n	8001246 <tun_fsm_run+0x1a6>
			status = TUN_GREEN1_RED2;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <tun_fsm_run+0x1b4>)
 8001178:	2218      	movs	r2, #24
 800117a:	601a      	str	r2, [r3, #0]
			IncYellow2s(10000);
 800117c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001180:	f7ff fde4 	bl	8000d4c <IncYellow2s>
		}
		break;
 8001184:	e05f      	b.n	8001246 <tun_fsm_run+0x1a6>

	case TUN_GREEN1_RED2:
		GREEN_1();
 8001186:	f7ff ff23 	bl	8000fd0 <GREEN_1>
		YELLOW_2();
 800118a:	f7ff ff59 	bl	8001040 <YELLOW_2>
		RED_3();
 800118e:	f7ff fcd9 	bl	8000b44 <RED_3>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <tun_fsm_run+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d004      	beq.n	80011a4 <tun_fsm_run+0x104>
 800119a:	f7ff f8f5 	bl	8000388 <Button3_Is_Pressed>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d106      	bne.n	80011b2 <tun_fsm_run+0x112>
			status = TUN_GREEN1_RED2;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <tun_fsm_run+0x1b4>)
 80011a6:	2218      	movs	r2, #24
 80011a8:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 80011aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80011ae:	f7ff fd31 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80011b2:	f7ff f8c5 	bl	8000340 <Button1_Is_Pressed>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d106      	bne.n	80011ca <tun_fsm_run+0x12a>
			status = AUTO_RED1_GREEN2;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <tun_fsm_run+0x1b4>)
 80011be:	2202      	movs	r2, #2
 80011c0:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80011c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011c6:	f7ff fd25 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 80011ca:	f7ff f8cb 	bl	8000364 <Button2_Is_Pressed>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d13a      	bne.n	800124a <tun_fsm_run+0x1aa>
			status = TUN_YELLOW1_RED2;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <tun_fsm_run+0x1b4>)
 80011d6:	2219      	movs	r2, #25
 80011d8:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 80011da:	f242 7010 	movw	r0, #10000	; 0x2710
 80011de:	f7ff fd19 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if(Button4_Is_Pressed() == 1)
 8001156:	f7ff f933 	bl	80003c0 <Button4_Is_Pressed>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d148      	bne.n	80011f2 <tun_fsm_run+0x1e2>
				{
					status = PED_RED1_RED2;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <tun_fsm_run+0x1ec>)
 8001162:	2220      	movs	r2, #32
 8001164:	601a      	str	r2, [r3, #0]
					SetTimer1(3000);
 8001166:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800116a:	f7ff fd87 	bl	8000c7c <SetTimer1>
				}
		break;
<<<<<<< HEAD
 800116e:	e040      	b.n	80011f2 <tun_fsm_run+0x1e2>

	case TUN_YELLOW1_RED2:
		YELLOW_1();
 8001170:	f7ff fed2 	bl	8000f18 <YELLOW_1>
		RED_2();
 8001174:	f7ff ff0c 	bl	8000f90 <RED_2>
		RED_3();
 8001178:	f7ff fd18 	bl	8000bac <RED_3>
		buzzer_off();
 800117c:	f7ff fa6e 	bl	800065c <buzzer_off>
		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <tun_fsm_run+0x1f0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d004      	beq.n	8001192 <tun_fsm_run+0x182>
 8001188:	f7ff f908 	bl	800039c <Button3_Is_Pressed>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d106      	bne.n	80011a0 <tun_fsm_run+0x190>
			status = TUN_YELLOW1_RED2;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <tun_fsm_run+0x1ec>)
 8001194:	2219      	movs	r2, #25
 8001196:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8001198:	f242 7010 	movw	r0, #10000	; 0x2710
 800119c:	f7ff fd6e 	bl	8000c7c <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 80011a0:	f7ff f8d8 	bl	8000354 <Button1_Is_Pressed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d106      	bne.n	80011b8 <tun_fsm_run+0x1a8>
			status = AUTO_RED1_GREEN2;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <tun_fsm_run+0x1ec>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 80011b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011b4:	f7ff fd62 	bl	8000c7c <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 80011b8:	f7ff f8de 	bl	8000378 <Button2_Is_Pressed>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d106      	bne.n	80011d0 <tun_fsm_run+0x1c0>
			status = TUN_RED1_GREEN2;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <tun_fsm_run+0x1ec>)
 80011c4:	2216      	movs	r2, #22
 80011c6:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 80011c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80011cc:	f7ff fd56 	bl	8000c7c <SetTimer1>
=======
 80011e2:	e032      	b.n	800124a <tun_fsm_run+0x1aa>

	case TUN_YELLOW1_RED2:
		YELLOW_1();
 80011e4:	f7ff fee0 	bl	8000fa8 <YELLOW_1>
		RED_2();
 80011e8:	f7ff ff1a 	bl	8001020 <RED_2>
		RED_3();
 80011ec:	f7ff fcaa 	bl	8000b44 <RED_3>

		if (timer1_flag == 1 || Button3_Is_Pressed() == 1) {
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <tun_fsm_run+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d004      	beq.n	8001202 <tun_fsm_run+0x162>
 80011f8:	f7ff f8c6 	bl	8000388 <Button3_Is_Pressed>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d106      	bne.n	8001210 <tun_fsm_run+0x170>
			status = TUN_YELLOW1_RED2;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <tun_fsm_run+0x1b4>)
 8001204:	2219      	movs	r2, #25
 8001206:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8001208:	f242 7010 	movw	r0, #10000	; 0x2710
 800120c:	f7ff fd02 	bl	8000c14 <SetTimer1>
		}
		if (Button1_Is_Pressed() == 1) {
 8001210:	f7ff f896 	bl	8000340 <Button1_Is_Pressed>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d106      	bne.n	8001228 <tun_fsm_run+0x188>
			status = AUTO_RED1_GREEN2;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <tun_fsm_run+0x1b4>)
 800121c:	2202      	movs	r2, #2
 800121e:	601a      	str	r2, [r3, #0]
			SetTimer1(3000);
 8001220:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001224:	f7ff fcf6 	bl	8000c14 <SetTimer1>
		}
		if (Button2_Is_Pressed() == 1) {
 8001228:	f7ff f89c 	bl	8000364 <Button2_Is_Pressed>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10d      	bne.n	800124e <tun_fsm_run+0x1ae>
			status = TUN_RED1_GREEN2;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <tun_fsm_run+0x1b4>)
 8001234:	2216      	movs	r2, #22
 8001236:	601a      	str	r2, [r3, #0]
			SetTimer1(10000);
 8001238:	f242 7010 	movw	r0, #10000	; 0x2710
 800123c:	f7ff fcea 	bl	8000c14 <SetTimer1>
>>>>>>> main
		}
		if(Button4_Is_Pressed() == 1)
 80011d0:	f7ff f8f6 	bl	80003c0 <Button4_Is_Pressed>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10d      	bne.n	80011f6 <tun_fsm_run+0x1e6>
				{
					status = PED_RED1_RED2;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <tun_fsm_run+0x1ec>)
 80011dc:	2220      	movs	r2, #32
 80011de:	601a      	str	r2, [r3, #0]
					SetTimer1(3000);
 80011e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011e4:	f7ff fd4a 	bl	8000c7c <SetTimer1>
				}
		break;
<<<<<<< HEAD
 80011e8:	e005      	b.n	80011f6 <tun_fsm_run+0x1e6>
		break;
 80011ea:	bf00      	nop
 80011ec:	e004      	b.n	80011f8 <tun_fsm_run+0x1e8>
		break;
 80011ee:	bf00      	nop
 80011f0:	e002      	b.n	80011f8 <tun_fsm_run+0x1e8>
		break;
 80011f2:	bf00      	nop
 80011f4:	e000      	b.n	80011f8 <tun_fsm_run+0x1e8>
		break;
 80011f6:	bf00      	nop
	}
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000088 	.word	0x20000088
 8001200:	2000008c 	.word	0x2000008c

08001204 <Reset_Handler>:
=======
 8001240:	e005      	b.n	800124e <tun_fsm_run+0x1ae>
		break;
 8001242:	bf00      	nop
 8001244:	e004      	b.n	8001250 <tun_fsm_run+0x1b0>
		break;
 8001246:	bf00      	nop
 8001248:	e002      	b.n	8001250 <tun_fsm_run+0x1b0>
		break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <tun_fsm_run+0x1b0>
		break;
 800124e:	bf00      	nop
	}
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000088 	.word	0x20000088
 8001258:	2000008c 	.word	0x2000008c

0800125c <Reset_Handler>:
>>>>>>> main
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff fe5b 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f001 fe79 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fa1f 	bl	8000674 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001240:	08002fbc 	.word	0x08002fbc
  ldr r2, =_sbss
 8001244:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001248:	20000130 	.word	0x20000130

0800124c <ADC1_2_IRQHandler>:
=======
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001282:	f7ff fe77 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f001 fe9d 	bl	8002fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128a:	f7ff f9d1 	bl	8000630 <main>
  bx lr
 800128e:	4770      	bx	lr
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001298:	0800305c 	.word	0x0800305c
  ldr r2, =_sbss
 800129c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012a0:	20000154 	.word	0x20000154

080012a4 <ADC1_2_IRQHandler>:
>>>>>>> main
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
=======
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <HAL_Init>:
>>>>>>> main
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
=======
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
>>>>>>> main
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
=======
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x28>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x28>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6013      	str	r3, [r2, #0]
>>>>>>> main
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f923 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fd6c 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
=======
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f947 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	200f      	movs	r0, #15
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fd62 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
>>>>>>> main
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f93b 	bl	8001516 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
=======
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f95f 	bl	80015b6 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
>>>>>>> main
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f903 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
=======
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f927 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
>>>>>>> main
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000050 	.word	0x20000050
 80012d4:	20000058 	.word	0x20000058
 80012d8:	20000054 	.word	0x20000054

080012dc <HAL_IncTick>:
=======
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000050 	.word	0x20000050
 800132c:	20000058 	.word	0x20000058
 8001330:	20000054 	.word	0x20000054

08001334 <HAL_IncTick>:
>>>>>>> main
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000058 	.word	0x20000058
 80012fc:	2000012c 	.word	0x2000012c

08001300 <HAL_GetTick>:
=======
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a03      	ldr	r2, [pc, #12]	; (8001354 <HAL_IncTick+0x20>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000058 	.word	0x20000058
 8001354:	20000150 	.word	0x20000150

08001358 <HAL_GetTick>:
>>>>>>> main
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	2000012c 	.word	0x2000012c

08001314 <__NVIC_SetPriorityGrouping>:
=======
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000150 	.word	0x20000150

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fff0 	bl	8001358 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffe0 	bl	8001358 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000058 	.word	0x20000058

080013b4 <__NVIC_SetPriorityGrouping>:
>>>>>>> main
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
=======
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
>>>>>>> main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
=======
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
>>>>>>> main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4906      	ldr	r1, [pc, #24]	; (80013ac <__NVIC_EnableIRQ+0x34>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
=======
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4906      	ldr	r1, [pc, #24]	; (800144c <__NVIC_EnableIRQ+0x34>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
>>>>>>> main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> main
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
=======
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
>>>>>>> main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
=======
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <SysTick_Config>:
=======
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <SysTick_Config>:
>>>>>>> main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff90 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
=======
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff90 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
=======
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff2d 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
=======
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff2d 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
>>>>>>> main
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
=======
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
>>>>>>> main
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80014d4:	f7ff ff42 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff90 	bl	8001404 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5f 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
=======
 8001574:	f7ff ff42 	bl	80013fc <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
>>>>>>> main
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
=======
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff35 	bl	8001378 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
=======
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff35 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
>>>>>>> main
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
=======
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
>>>>>>> main
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	; 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> main
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
=======
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
>>>>>>> main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001542:	e169      	b.n	8001818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001544:	2201      	movs	r2, #1
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8158 	bne.w	8001812 <HAL_GPIO_Init+0x2e2>
=======
 80015e2:	e169      	b.n	80018b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8158 	bne.w	80018b2 <HAL_GPIO_Init+0x2e2>
>>>>>>> main
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a9a      	ldr	r2, [pc, #616]	; (80017d0 <HAL_GPIO_Init+0x2a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800156c:	4a98      	ldr	r2, [pc, #608]	; (80017d0 <HAL_GPIO_Init+0x2a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d875      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001572:	4a98      	ldr	r2, [pc, #608]	; (80017d4 <HAL_GPIO_Init+0x2a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d058      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001578:	4a96      	ldr	r2, [pc, #600]	; (80017d4 <HAL_GPIO_Init+0x2a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d86f      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800157e:	4a96      	ldr	r2, [pc, #600]	; (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d052      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001584:	4a94      	ldr	r2, [pc, #592]	; (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d869      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800158a:	4a94      	ldr	r2, [pc, #592]	; (80017dc <HAL_GPIO_Init+0x2ac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04c      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001590:	4a92      	ldr	r2, [pc, #584]	; (80017dc <HAL_GPIO_Init+0x2ac>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d863      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001596:	4a92      	ldr	r2, [pc, #584]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d046      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800159c:	4a90      	ldr	r2, [pc, #576]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d85d      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d82a      	bhi.n	80015fc <HAL_GPIO_Init+0xcc>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d859      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_GPIO_Init+0x80>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	08001605 	.word	0x08001605
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001659 	.word	0x08001659
 80015c0:	0800165f 	.word	0x0800165f
 80015c4:	0800165f 	.word	0x0800165f
 80015c8:	0800165f 	.word	0x0800165f
 80015cc:	0800165f 	.word	0x0800165f
 80015d0:	0800165f 	.word	0x0800165f
 80015d4:	0800165f 	.word	0x0800165f
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	0800165f 	.word	0x0800165f
 80015e0:	0800165f 	.word	0x0800165f
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	0800165f 	.word	0x0800165f
 80015ec:	0800165f 	.word	0x0800165f
 80015f0:	0800165f 	.word	0x0800165f
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001621 	.word	0x08001621
 80015fc:	4a79      	ldr	r2, [pc, #484]	; (80017e4 <HAL_GPIO_Init+0x2b4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xfa>
=======
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a9a      	ldr	r2, [pc, #616]	; (8001870 <HAL_GPIO_Init+0x2a0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d05e      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800160c:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_GPIO_Init+0x2a0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d875      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001612:	4a98      	ldr	r2, [pc, #608]	; (8001874 <HAL_GPIO_Init+0x2a4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d058      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001618:	4a96      	ldr	r2, [pc, #600]	; (8001874 <HAL_GPIO_Init+0x2a4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d86f      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800161e:	4a96      	ldr	r2, [pc, #600]	; (8001878 <HAL_GPIO_Init+0x2a8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d052      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_GPIO_Init+0x2a8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d869      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800162a:	4a94      	ldr	r2, [pc, #592]	; (800187c <HAL_GPIO_Init+0x2ac>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04c      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 8001630:	4a92      	ldr	r2, [pc, #584]	; (800187c <HAL_GPIO_Init+0x2ac>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d863      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001636:	4a92      	ldr	r2, [pc, #584]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d046      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
 800163c:	4a90      	ldr	r2, [pc, #576]	; (8001880 <HAL_GPIO_Init+0x2b0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d85d      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d82a      	bhi.n	800169c <HAL_GPIO_Init+0xcc>
 8001646:	2b12      	cmp	r3, #18
 8001648:	d859      	bhi.n	80016fe <HAL_GPIO_Init+0x12e>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <HAL_GPIO_Init+0x80>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	080016cb 	.word	0x080016cb
 8001654:	080016a5 	.word	0x080016a5
 8001658:	080016b7 	.word	0x080016b7
 800165c:	080016f9 	.word	0x080016f9
 8001660:	080016ff 	.word	0x080016ff
 8001664:	080016ff 	.word	0x080016ff
 8001668:	080016ff 	.word	0x080016ff
 800166c:	080016ff 	.word	0x080016ff
 8001670:	080016ff 	.word	0x080016ff
 8001674:	080016ff 	.word	0x080016ff
 8001678:	080016ff 	.word	0x080016ff
 800167c:	080016ff 	.word	0x080016ff
 8001680:	080016ff 	.word	0x080016ff
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016ff 	.word	0x080016ff
 800168c:	080016ff 	.word	0x080016ff
 8001690:	080016ff 	.word	0x080016ff
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016c1 	.word	0x080016c1
 800169c:	4a79      	ldr	r2, [pc, #484]	; (8001884 <HAL_GPIO_Init+0x2b4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0xfa>
>>>>>>> main
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e029      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e024      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01f      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e01a      	b.n	8001660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e013      	b.n	8001660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e009      	b.n	8001660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e003      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x130>
          break;
 800165e:	bf00      	nop
=======
 80016a2:	e02c      	b.n	80016fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e029      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	3304      	adds	r3, #4
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e024      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	3308      	adds	r3, #8
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e01f      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	330c      	adds	r3, #12
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e01a      	b.n	8001700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016d2:	2304      	movs	r3, #4
 80016d4:	623b      	str	r3, [r7, #32]
          break;
 80016d6:	e013      	b.n	8001700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	611a      	str	r2, [r3, #16]
          break;
 80016ea:	e009      	b.n	8001700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	615a      	str	r2, [r3, #20]
          break;
 80016f6:	e003      	b.n	8001700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x130>
          break;
 80016fe:	bf00      	nop
>>>>>>> main
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	; 0xff
 8001664:	d801      	bhi.n	800166a <HAL_GPIO_Init+0x13a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e001      	b.n	800166e <HAL_GPIO_Init+0x13e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	; 0xff
 8001674:	d802      	bhi.n	800167c <HAL_GPIO_Init+0x14c>
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x152>
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3b08      	subs	r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	210f      	movs	r1, #15
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]
=======
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d801      	bhi.n	800170a <HAL_GPIO_Init+0x13a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	e001      	b.n	800170e <HAL_GPIO_Init+0x13e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d802      	bhi.n	800171c <HAL_GPIO_Init+0x14c>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x152>
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	3b08      	subs	r3, #8
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	210f      	movs	r1, #15
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	6a39      	ldr	r1, [r7, #32]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
>>>>>>> main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80b1 	beq.w	8001812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b0:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a40      	ldr	r2, [pc, #256]	; (80017f0 <HAL_GPIO_Init+0x2c0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1ec>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1e8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1e0>
 800170c:	2303      	movs	r3, #3
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001710:	2304      	movs	r3, #4
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 800171c:	2300      	movs	r3, #0
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800172e:	492f      	ldr	r1, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80b1 	beq.w	80018b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001750:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a4c      	ldr	r2, [pc, #304]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001768:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_GPIO_Init+0x2bc>)
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a40      	ldr	r2, [pc, #256]	; (8001890 <HAL_GPIO_Init+0x2c0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_GPIO_Init+0x1ec>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3e      	ldr	r2, [pc, #248]	; (8001898 <HAL_GPIO_Init+0x2c8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d007      	beq.n	80017b4 <HAL_GPIO_Init+0x1e4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3d      	ldr	r2, [pc, #244]	; (800189c <HAL_GPIO_Init+0x2cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_GPIO_Init+0x1e0>
 80017ac:	2303      	movs	r3, #3
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e004      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_GPIO_Init+0x1ee>
 80017bc:	2300      	movs	r3, #0
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	f002 0203 	and.w	r2, r2, #3
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	4093      	lsls	r3, r2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ce:	492f      	ldr	r1, [pc, #188]	; (800188c <HAL_GPIO_Init+0x2bc>)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> main


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	492c      	ldr	r1, [pc, #176]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x234>
=======
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	492c      	ldr	r1, [pc, #176]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x234>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4928      	ldr	r1, [pc, #160]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
=======
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4928      	ldr	r1, [pc, #160]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
>>>>>>> main
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4922      	ldr	r1, [pc, #136]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x25c>
=======
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4922      	ldr	r1, [pc, #136]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x25c>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	491e      	ldr	r1, [pc, #120]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
=======
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	491e      	ldr	r1, [pc, #120]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
>>>>>>> main
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4918      	ldr	r1, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x284>
=======
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4918      	ldr	r1, [pc, #96]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x284>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4914      	ldr	r1, [pc, #80]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
=======
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4914      	ldr	r1, [pc, #80]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
>>>>>>> main
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	490e      	ldr	r1, [pc, #56]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60cb      	str	r3, [r1, #12]
 80017cc:	e021      	b.n	8001812 <HAL_GPIO_Init+0x2e2>
 80017ce:	bf00      	nop
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10310000 	.word	0x10310000
 80017d8:	10220000 	.word	0x10220000
 80017dc:	10210000 	.word	0x10210000
 80017e0:	10120000 	.word	0x10120000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400
 8001800:	40010400 	.word	0x40010400
=======
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d021      	beq.n	80018a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e021      	b.n	80018b2 <HAL_GPIO_Init+0x2e2>
 800186e:	bf00      	nop
 8001870:	10320000 	.word	0x10320000
 8001874:	10310000 	.word	0x10310000
 8001878:	10220000 	.word	0x10220000
 800187c:	10210000 	.word	0x10210000
 8001880:	10120000 	.word	0x10120000
 8001884:	10110000 	.word	0x10110000
 8001888:	40021000 	.word	0x40021000
 800188c:	40010000 	.word	0x40010000
 8001890:	40010800 	.word	0x40010800
 8001894:	40010c00 	.word	0x40010c00
 8001898:	40011000 	.word	0x40011000
 800189c:	40011400 	.word	0x40011400
 80018a0:	40010400 	.word	0x40010400
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_GPIO_Init+0x304>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	43db      	mvns	r3, r3
 800180c:	4909      	ldr	r1, [pc, #36]	; (8001834 <HAL_GPIO_Init+0x304>)
 800180e:	4013      	ands	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
=======
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_GPIO_Init+0x304>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <HAL_GPIO_Init+0x304>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
>>>>>>> main
        }
      }
    }

	position++;
<<<<<<< HEAD
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3301      	adds	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae8e 	bne.w	8001544 <HAL_GPIO_Init+0x14>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	372c      	adds	r7, #44	; 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_ReadPin>:
=======
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f ae8e 	bne.w	80015e4 <HAL_GPIO_Init+0x14>
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_GPIO_ReadPin>:
>>>>>>> main
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
=======
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
>>>>>>> main
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e001      	b.n	800185a <HAL_GPIO_ReadPin+0x22>
=======
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_ReadPin+0x22>
>>>>>>> main
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <HAL_GPIO_WritePin>:
=======
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <HAL_GPIO_WritePin>:
>>>>>>> main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	807b      	strh	r3, [r7, #2]
 8001872:	4613      	mov	r3, r2
 8001874:	707b      	strb	r3, [r7, #1]
=======
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	807b      	strh	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	707b      	strb	r3, [r7, #1]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001876:	787b      	ldrb	r3, [r7, #1]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]
=======
 8001916:	787b      	ldrb	r3, [r7, #1]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191c:	887a      	ldrh	r2, [r7, #2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
>>>>>>> main
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001882:	e003      	b.n	800188c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	041a      	lsls	r2, r3, #16
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	611a      	str	r2, [r3, #16]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <HAL_RCC_OscConfig>:
=======
 8001922:	e003      	b.n	800192c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	041a      	lsls	r2, r3, #16
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	611a      	str	r2, [r3, #16]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <HAL_RCC_OscConfig>:
>>>>>>> main
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
=======
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e26c      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
=======
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e26c      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8087 	beq.w	80019c6 <HAL_RCC_OscConfig+0x12e>
=======
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8087 	beq.w	8001a66 <HAL_RCC_OscConfig+0x12e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d00c      	beq.n	80018de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c4:	4b8f      	ldr	r3, [pc, #572]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d112      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5e>
 80018d0:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d10b      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018de:	4b89      	ldr	r3, [pc, #548]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d06c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x12c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d168      	bne.n	80019c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e246      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
=======
 8001958:	4b92      	ldr	r3, [pc, #584]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b04      	cmp	r3, #4
 8001962:	d00c      	beq.n	800197e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001964:	4b8f      	ldr	r3, [pc, #572]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d112      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
 8001970:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d06c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x12c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d168      	bne.n	8001a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e246      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x76>
 8001900:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e02e      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a77      	ldr	r2, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0xbc>
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a67      	ldr	r2, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]
=======
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x76>
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e02e      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x98>
 80019b6:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7a      	ldr	r2, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xbc>
 80019da:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd4>
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a67      	ldr	r2, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]
>>>>>>> main


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcc4 	bl	8001300 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fcc0 	bl	8001300 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1fa      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xe4>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
=======
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fca0 	bl	8001358 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fc9c 	bl	8001358 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1fa      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe4>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
>>>>>>> main
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800199c:	f7ff fcb0 	bl	8001300 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcac 	bl	8001300 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1e6      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x10c>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
=======
 8001a3c:	f7ff fc8c 	bl	8001358 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc88 	bl	8001358 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1e6      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x10c>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_OscConfig+0x202>
=======
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d063      	beq.n	8001b3a <HAL_RCC_OscConfig+0x202>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019de:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x18c>
 80019ea:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1ba      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
=======
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1ba      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4939      	ldr	r1, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
=======
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4939      	ldr	r1, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e03a      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
>>>>>>> main
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc65 	bl	8001300 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fc61 	bl	8001300 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e19b      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1a2>
=======
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fc41 	bl	8001358 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fc3d 	bl	8001358 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e19b      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x1a2>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4927      	ldr	r1, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
=======
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x202>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_RCC_OscConfig+0x270>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc44 	bl	8001300 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc40 	bl	8001300 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e17a      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1e4>
=======
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fc20 	bl	8001358 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fc1c 	bl	8001358 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e17a      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1e4>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d03a      	beq.n	8001b1c <HAL_RCC_OscConfig+0x284>
=======
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03a      	beq.n	8001bbc <HAL_RCC_OscConfig+0x284>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d019      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fc24 	bl	8001300 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc20 	bl	8001300 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e15a      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x224>
=======
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d019      	beq.n	8001b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fc00 	bl	8001358 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fbfc 	bl	8001358 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e15a      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x224>
>>>>>>> main
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 faa6 	bl	800202c <RCC_Delay>
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x284>
=======
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 faa6 	bl	80020cc <RCC_Delay>
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x284>
>>>>>>> main
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fc0a 	bl	8001300 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aee:	e00f      	b.n	8001b10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc06 	bl	8001300 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e140      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	42420000 	.word	0x42420000
 8001b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b9e      	ldr	r3, [pc, #632]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1e9      	bne.n	8001af0 <HAL_RCC_OscConfig+0x258>
=======
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_OscConfig+0x274>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fbe6 	bl	8001358 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fbe2 	bl	8001358 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e140      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	42420000 	.word	0x42420000
 8001bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e9      	bne.n	8001b90 <HAL_RCC_OscConfig+0x258>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a6 	beq.w	8001c76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
=======
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a6 	beq.w	8001d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8001b2e:	4b97      	ldr	r3, [pc, #604]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b94      	ldr	r3, [pc, #592]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a93      	ldr	r2, [pc, #588]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fbc7 	bl	8001300 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff fbc3 	bl	8001300 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0fd      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2de>
=======
 8001bce:	4b97      	ldr	r3, [pc, #604]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b94      	ldr	r3, [pc, #592]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a93      	ldr	r2, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b8e      	ldr	r3, [pc, #568]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b8b      	ldr	r3, [pc, #556]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a8a      	ldr	r2, [pc, #552]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fba3 	bl	8001358 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff fb9f 	bl	8001358 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	; 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0fd      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2de>
>>>>>>> main
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x312>
 8001b9c:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x334>
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a75      	ldr	r2, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a72      	ldr	r2, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	e01c      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x356>
 8001bd4:	4b6d      	ldr	r3, [pc, #436]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a6c      	ldr	r2, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a69      	ldr	r2, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb77 	bl	8001300 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff fb73 	bl	8001300 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0ab      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ee      	beq.n	8001c16 <HAL_RCC_OscConfig+0x37e>
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x3cc>
=======
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x312>
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x334>
 8001c52:	4b76      	ldr	r3, [pc, #472]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a75      	ldr	r2, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b73      	ldr	r3, [pc, #460]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a72      	ldr	r2, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e01c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x356>
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a6c      	ldr	r2, [pc, #432]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6213      	str	r3, [r2, #32]
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a69      	ldr	r2, [pc, #420]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x36e>
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a66      	ldr	r2, [pc, #408]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a63      	ldr	r2, [pc, #396]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb53 	bl	8001358 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb4f 	bl	8001358 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0ab      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x37e>
 8001cd8:	e014      	b.n	8001d04 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> main
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001c3a:	f7ff fb61 	bl	8001300 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fb5d 	bl	8001300 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e095      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3aa>
=======
 8001cda:	f7ff fb3d 	bl	8001358 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fb39 	bl	8001358 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e095      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ee      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> main
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]
=======
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
>>>>>>> main

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8081 	beq.w	8001d82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c80:	4b42      	ldr	r3, [pc, #264]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d061      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d146      	bne.n	8001d22 <HAL_RCC_OscConfig+0x48a>
=======
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8081 	beq.w	8001e22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d061      	beq.n	8001df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d146      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x48a>
>>>>>>> main
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x4fc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fb31 	bl	8001300 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff fb2d 	bl	8001300 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e067      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x40a>
=======
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fb0d 	bl	8001358 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff fb09 	bl	8001358 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e067      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x40a>
>>>>>>> main
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d108      	bne.n	8001cdc <HAL_RCC_OscConfig+0x444>
=======
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d108      	bne.n	8001d7c <HAL_RCC_OscConfig+0x444>
>>>>>>> main
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8001cca:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	492d      	ldr	r1, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
=======
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	492d      	ldr	r1, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
>>>>>>> main
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a19      	ldr	r1, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	430b      	orrs	r3, r1
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x4fc>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fb01 	bl	8001300 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fafd 	bl	8001300 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e037      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x46a>
 8001d20:	e02f      	b.n	8001d82 <HAL_RCC_OscConfig+0x4ea>
=======
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a19      	ldr	r1, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	4927      	ldr	r1, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fadd 	bl	8001358 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fad9 	bl	8001358 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e037      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46a>
 8001dc0:	e02f      	b.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_RCC_OscConfig+0x4fc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff faea 	bl	8001300 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff fae6 	bl	8001300 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e020      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x498>
 8001d4e:	e018      	b.n	8001d82 <HAL_RCC_OscConfig+0x4ea>
=======
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCC_OscConfig+0x4fc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fac6 	bl	8001358 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff fac2 	bl	8001358 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e020      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x498>
 8001dee:	e018      	b.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> main
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e013      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
=======
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e013      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> main
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x4ec>
=======
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> main
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40007000 	.word	0x40007000
 8001d94:	42420060 	.word	0x42420060

08001d98 <HAL_RCC_ClockConfig>:
=======
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42420060 	.word	0x42420060

08001e38 <HAL_RCC_ClockConfig>:
>>>>>>> main
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
=======
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0d0      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
=======
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0d0      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d910      	bls.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	4965      	ldr	r1, [pc, #404]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
=======
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4965      	ldr	r1, [pc, #404]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0b8      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
=======
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d020      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x92>
=======
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x92>
>>>>>>> main
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df4:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a52      	ldr	r2, [pc, #328]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e16:	6053      	str	r3, [r2, #4]
=======
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eb6:	6053      	str	r3, [r2, #4]
>>>>>>> main
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	494d      	ldr	r1, [pc, #308]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
=======
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d040      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x120>
=======
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d040      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x120>
>>>>>>> main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e07f      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
=======
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e073      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
=======
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e073      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e06b      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4936      	ldr	r1, [pc, #216]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7ff fa3a 	bl	8001300 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff fa36 	bl	8001300 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e053      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf8>
=======
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06b      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4936      	ldr	r1, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff fa16 	bl	8001358 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff fa12 	bl	8001358 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e053      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> main
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d210      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
=======
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d210      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e032      	b.n	8001f4e <HAL_RCC_ClockConfig+0x1b6>
=======
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4916      	ldr	r1, [pc, #88]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
=======
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
=======
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8001f26:	f000 f821 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	490a      	ldr	r1, [pc, #40]	; (8001f60 <HAL_RCC_ClockConfig+0x1c8>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1cc>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1d0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f998 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08002fa4 	.word	0x08002fa4
 8001f64:	20000050 	.word	0x20000050
 8001f68:	20000054 	.word	0x20000054

08001f6c <HAL_RCC_GetSysClockFreq>:
=======
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1cc>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1d0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f974 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003044 	.word	0x08003044
 8002004:	20000050 	.word	0x20000050
 8002008:	20000054 	.word	0x20000054

0800200c <HAL_RCC_GetSysClockFreq>:
>>>>>>> main
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8001f6c:	b490      	push	{r4, r7}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
=======
 800200c:	b490      	push	{r4, r7}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
>>>>>>> main
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f74:	1d3c      	adds	r4, r7, #4
 8001f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002014:	1d3c      	adds	r4, r7, #4
 8002016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> main
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8001f7c:	f240 2301 	movw	r3, #513	; 0x201
 8001f80:	803b      	strh	r3, [r7, #0]
=======
 800201c:	f240 2301 	movw	r3, #513	; 0x201
 8002020:	803b      	strh	r3, [r7, #0]
>>>>>>> main
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
=======
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
>>>>>>> main
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x40>
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001faa:	e02d      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d002      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x40>
 8002046:	2b08      	cmp	r3, #8
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x46>
 800204a:	e02d      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> main
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fae:	623b      	str	r3, [r7, #32]
      break;
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xa2>
=======
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204e:	623b      	str	r3, [r7, #32]
      break;
 8002050:	e02d      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	0c9b      	lsrs	r3, r3, #18
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800205e:	4413      	add	r3, r2
 8002060:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002064:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> main
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c5b      	lsrs	r3, r3, #17
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fde:	4413      	add	r3, r2
 8001fe0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fe4:	61bb      	str	r3, [r7, #24]
=======
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	0c5b      	lsrs	r3, r3, #17
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800207e:	4413      	add	r3, r2
 8002080:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002084:	61bb      	str	r3, [r7, #24]
>>>>>>> main
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fea:	fb02 f203 	mul.w	r2, r2, r3
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	e004      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x96>
=======
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208a:	fb02 f203 	mul.w	r2, r2, r3
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
 8002096:	e004      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> main
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	623b      	str	r3, [r7, #32]
      break;
 8002006:	e002      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	623b      	str	r3, [r7, #32]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	623b      	str	r3, [r7, #32]
      break;
 800200c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200e:	6a3b      	ldr	r3, [r7, #32]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc90      	pop	{r4, r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	08002f94 	.word	0x08002f94
 8002020:	40021000 	.word	0x40021000
 8002024:	007a1200 	.word	0x007a1200
 8002028:	003d0900 	.word	0x003d0900

0800202c <RCC_Delay>:
=======
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	6a3b      	ldr	r3, [r7, #32]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc90      	pop	{r4, r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	08003034 	.word	0x08003034
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	003d0900 	.word	0x003d0900

080020cc <RCC_Delay>:
>>>>>>> main
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <RCC_Delay+0x34>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <RCC_Delay+0x38>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0a5b      	lsrs	r3, r3, #9
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002048:	bf00      	nop
  }
  while (Delay --);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1e5a      	subs	r2, r3, #1
 800204e:	60fa      	str	r2, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <RCC_Delay+0x1c>
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000050 	.word	0x20000050
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <HAL_TIM_Base_Init>:
=======
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <RCC_Delay+0x34>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <RCC_Delay+0x38>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e8:	bf00      	nop
  }
  while (Delay --);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	60fa      	str	r2, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <RCC_Delay+0x1c>
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000050 	.word	0x20000050
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_TIM_Base_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e041      	b.n	80020fe <HAL_TIM_Base_Init+0x96>
=======
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
>>>>>>> main
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fe8c 	bl	8000dac <HAL_TIM_Base_MspInit>
=======
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fe5e 	bl	8000df0 <HAL_TIM_Base_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 fc28 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_TIM_Base_Start_IT>:
=======
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fc28 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_Base_Start_IT>:
>>>>>>> main
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
=======
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e03a      	b.n	8002196 <HAL_TIM_Base_Start_IT+0x8e>
=======
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e03a      	b.n	8002236 <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> main
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_TIM_Base_Start_IT+0x98>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00e      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x58>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d009      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x58>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x58>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d111      	bne.n	8002184 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d010      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002182:	e007      	b.n	8002194 <HAL_TIM_Base_Start_IT+0x8c>
=======
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_TIM_Base_Start_IT+0x98>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <HAL_TIM_Base_Start_IT+0x9c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <HAL_TIM_Base_Start_IT+0xa0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d010      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	e007      	b.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
=======
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
>>>>>>> main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800

080021ac <HAL_TIM_PWM_Init>:
=======
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800

0800224c <HAL_TIM_PWM_Init>:
>>>>>>> main
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e041      	b.n	8002242 <HAL_TIM_PWM_Init+0x96>
=======
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e041      	b.n	80022e2 <HAL_TIM_PWM_Init+0x96>
>>>>>>> main
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> main
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f839 	bl	800224a <HAL_TIM_PWM_MspInit>
=======
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f839 	bl	80022ea <HAL_TIM_PWM_MspInit>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fb86 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_TIM_PWM_MspInit>:
=======
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 fb86 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_TIM_PWM_MspInit>:
>>>>>>> main
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
=======
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_PWM_Start>:
=======
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_TIM_PWM_Start>:
>>>>>>> main
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
=======
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_TIM_PWM_Start+0x24>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e022      	b.n	80022c6 <HAL_TIM_PWM_Start+0x6a>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d109      	bne.n	800229a <HAL_TIM_PWM_Start+0x3e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e015      	b.n	80022c6 <HAL_TIM_PWM_Start+0x6a>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d109      	bne.n	80022b4 <HAL_TIM_PWM_Start+0x58>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e008      	b.n	80022c6 <HAL_TIM_PWM_Start+0x6a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e05e      	b.n	800238c <HAL_TIM_PWM_Start+0x130>
=======
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_TIM_PWM_Start+0x24>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e022      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b04      	cmp	r3, #4
 8002324:	d109      	bne.n	800233a <HAL_TIM_PWM_Start+0x3e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e015      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d109      	bne.n	8002354 <HAL_TIM_PWM_Start+0x58>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e008      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e05e      	b.n	800242c <HAL_TIM_PWM_Start+0x130>
>>>>>>> main
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d104      	bne.n	80022de <HAL_TIM_PWM_Start+0x82>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	e013      	b.n	8002306 <HAL_TIM_PWM_Start+0xaa>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start+0x92>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	e00b      	b.n	8002306 <HAL_TIM_PWM_Start+0xaa>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start+0xa2>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022fc:	e003      	b.n	8002306 <HAL_TIM_PWM_Start+0xaa>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2201      	movs	r2, #1
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fd74 	bl	8002dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_TIM_PWM_Start+0x138>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d107      	bne.n	800232e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_TIM_PWM_Start+0x82>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800237c:	e013      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d104      	bne.n	800238e <HAL_TIM_PWM_Start+0x92>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d104      	bne.n	800239e <HAL_TIM_PWM_Start+0xa2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	e003      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd74 	bl	8002e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_TIM_PWM_Start+0x138>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d107      	bne.n	80023ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> main
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_TIM_PWM_Start+0x138>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_TIM_PWM_Start+0xfa>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d009      	beq.n	8002356 <HAL_TIM_PWM_Start+0xfa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_TIM_PWM_Start+0x13c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_TIM_PWM_Start+0xfa>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <HAL_TIM_PWM_Start+0x140>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d111      	bne.n	800237a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d010      	beq.n	800238a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002378:	e007      	b.n	800238a <HAL_TIM_PWM_Start+0x12e>
=======
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_PWM_Start+0x138>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d009      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIM_PWM_Start+0x13c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_TIM_PWM_Start+0x140>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d010      	beq.n	800242a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	e007      	b.n	800242a <HAL_TIM_PWM_Start+0x12e>
>>>>>>> main
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
=======
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
>>>>>>> main
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_TIM_IRQHandler>:
=======
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <HAL_TIM_IRQHandler>:
>>>>>>> main
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0202 	mvn.w	r2, #2
 80023cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x4a>
=======
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa6f 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0x56>
=======
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa6f 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x56>
>>>>>>> main
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa62 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa71 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
=======
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa62 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa71 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
>>>>>>> main
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0204 	mvn.w	r2, #4
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x9e>
=======
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa45 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xaa>
=======
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa45 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa38 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa47 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
=======
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa38 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fa47 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0208 	mvn.w	r2, #8
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0xf2>
=======
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa1b 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xfe>
=======
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa1b 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xfe>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa0e 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fa1d 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
=======
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa0e 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa1d 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0210 	mvn.w	r2, #16
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2208      	movs	r2, #8
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x146>
=======
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0210 	mvn.w	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2208      	movs	r2, #8
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x146>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f9f1 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0x152>
=======
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9f1 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x152>
>>>>>>> main
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9e4 	bl	80028b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f9f3 	bl	80028d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
=======
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9e4 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9f3 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
>>>>>>> main
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0201 	mvn.w	r2, #1
 800251c:	611a      	str	r2, [r3, #16]
=======
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0201 	mvn.w	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fa40 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
=======
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe f9de 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002548:	611a      	str	r2, [r3, #16]
=======
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e8:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fce1 	bl	8002f12 <HAL_TIMEx_BreakCallback>
=======
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fce1 	bl	8002fb2 <HAL_TIMEx_BreakCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002574:	611a      	str	r2, [r3, #16]
=======
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002614:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9b7 	bl	80028ea <HAL_TIM_TriggerCallback>
=======
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f9b7 	bl	800298a <HAL_TIM_TriggerCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0220 	mvn.w	r2, #32
 80025a0:	611a      	str	r2, [r3, #16]
=======
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0220 	mvn.w	r2, #32
 8002640:	611a      	str	r2, [r3, #16]
>>>>>>> main
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fcac 	bl	8002f00 <HAL_TIMEx_CommutCallback>
=======
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fcac 	bl	8002fa0 <HAL_TIMEx_CommutCallback>
>>>>>>> main
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_PWM_ConfigChannel>:
=======
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> main
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
=======
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0ac      	b.n	8002724 <HAL_TIM_PWM_ConfigChannel+0x174>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f200 809f 	bhi.w	8002718 <HAL_TIM_PWM_ConfigChannel+0x168>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002615 	.word	0x08002615
 80025e4:	08002719 	.word	0x08002719
 80025e8:	08002719 	.word	0x08002719
 80025ec:	08002719 	.word	0x08002719
 80025f0:	08002655 	.word	0x08002655
 80025f4:	08002719 	.word	0x08002719
 80025f8:	08002719 	.word	0x08002719
 80025fc:	08002719 	.word	0x08002719
 8002600:	08002697 	.word	0x08002697
 8002604:	08002719 	.word	0x08002719
 8002608:	08002719 	.word	0x08002719
 800260c:	08002719 	.word	0x08002719
 8002610:	080026d7 	.word	0x080026d7
=======
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002666:	2302      	movs	r3, #2
 8002668:	e0ac      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	f200 809f 	bhi.w	80027b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080027b9 	.word	0x080027b9
 8002688:	080027b9 	.word	0x080027b9
 800268c:	080027b9 	.word	0x080027b9
 8002690:	080026f5 	.word	0x080026f5
 8002694:	080027b9 	.word	0x080027b9
 8002698:	080027b9 	.word	0x080027b9
 800269c:	080027b9 	.word	0x080027b9
 80026a0:	08002737 	.word	0x08002737
 80026a4:	080027b9 	.word	0x080027b9
 80026a8:	080027b9 	.word	0x080027b9
 80026ac:	080027b9 	.word	0x080027b9
 80026b0:	08002777 	.word	0x08002777
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f9d0 	bl	80029c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	619a      	str	r2, [r3, #24]
      break;
 8002652:	e062      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f9d0 	bl	8002a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
      break;
 80026f2:	e062      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fa16 	bl	8002a8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	021a      	lsls	r2, r3, #8
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]
      break;
 8002694:	e041      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fa16 	bl	8002b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	021a      	lsls	r2, r3, #8
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	619a      	str	r2, [r3, #24]
      break;
 8002734:	e041      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fa5f 	bl	8002b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0208 	orr.w	r2, r2, #8
 80026b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0204 	bic.w	r2, r2, #4
 80026c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
      break;
 80026d4:	e021      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa5f 	bl	8002c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0204 	bic.w	r2, r2, #4
 8002760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69d9      	ldr	r1, [r3, #28]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
      break;
 8002774:	e021      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> main
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 faa9 	bl	8002c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
      break;
 8002716:	e000      	b.n	800271a <HAL_TIM_PWM_ConfigChannel+0x16a>
=======
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 faa9 	bl	8002cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	61da      	str	r2, [r3, #28]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x16a>
>>>>>>> main
    }

    default:
      break;
<<<<<<< HEAD
 8002718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_ConfigClockSource>:
=======
 80027b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_ConfigClockSource>:
>>>>>>> main
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
=======
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIM_ConfigClockSource+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e0b3      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x180>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x18>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0b3      	b.n	800294c <HAL_TIM_ConfigClockSource+0x180>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800276a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277c:	d03e      	beq.n	80027fc <HAL_TIM_ConfigClockSource+0xd0>
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	f200 8087 	bhi.w	8002894 <HAL_TIM_ConfigClockSource+0x168>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	f000 8085 	beq.w	8002898 <HAL_TIM_ConfigClockSource+0x16c>
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d87f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d01a      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xa2>
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d87b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 800279c:	2b60      	cmp	r3, #96	; 0x60
 800279e:	d050      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x116>
 80027a0:	2b60      	cmp	r3, #96	; 0x60
 80027a2:	d877      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d03c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xf6>
 80027a8:	2b50      	cmp	r3, #80	; 0x50
 80027aa:	d873      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d058      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x136>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d86f      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d064      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x156>
 80027b8:	2b30      	cmp	r3, #48	; 0x30
 80027ba:	d86b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d060      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x156>
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d867      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d05c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x156>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d05a      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x156>
=======
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d03e      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xd0>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	f200 8087 	bhi.w	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	f000 8085 	beq.w	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d87f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d01a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xa2>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d87b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d050      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x116>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d877      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d03c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d873      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d058      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x136>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d86f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d064      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d867      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d05a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> main
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 80027cc:	e062      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f000 faee 	bl	8002dbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
      break;
 80027fa:	e04e      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f000 fad7 	bl	8002dbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281e:	609a      	str	r2, [r3, #8]
      break;
 8002820:	e03b      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 fa4e 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2150      	movs	r1, #80	; 0x50
 800283a:	4618      	mov	r0, r3
 800283c:	f000 faa5 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002840:	e02b      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f000 fa6c 	bl	8002d2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2160      	movs	r1, #96	; 0x60
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fa95 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002860:	e01b      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	461a      	mov	r2, r3
 8002870:	f000 fa2e 	bl	8002cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fa85 	bl	8002d8a <TIM_ITRx_SetConfig>
      break;
 8002880:	e00b      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 fa7c 	bl	8002d8a <TIM_ITRx_SetConfig>
        break;
 8002892:	e002      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002894:	bf00      	nop
 8002896:	e000      	b.n	800289a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002898:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800286c:	e062      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f000 faee 	bl	8002e5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002890:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e04e      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f000 fad7 	bl	8002e5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 fa4e 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	; 0x50
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 faa5 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa6c 	bl	8002dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	; 0x60
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa95 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002900:	e01b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 fa2e 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa85 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002920:	e00b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 fa7c 	bl	8002e2a <TIM_ITRx_SetConfig>
        break;
 8002932:	e002      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002938:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> main
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
=======
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_IC_CaptureCallback>:
=======
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> main
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
=======
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> main
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
=======
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIM_TriggerCallback>:
=======
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_TriggerCallback>:
>>>>>>> main
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
=======
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <TIM_Base_SetConfig>:
=======
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <TIM_Base_SetConfig>:
>>>>>>> main
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <TIM_Base_SetConfig+0xb8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00b      	beq.n	800292c <TIM_Base_SetConfig+0x30>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d007      	beq.n	800292c <TIM_Base_SetConfig+0x30>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <TIM_Base_SetConfig+0xbc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0x30>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <TIM_Base_SetConfig+0xc0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d108      	bne.n	800293e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <TIM_Base_SetConfig+0xb8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0x62>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x62>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <TIM_Base_SetConfig+0xbc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <TIM_Base_SetConfig+0xc0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
=======
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d108      	bne.n	8002a10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
>>>>>>> main
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <TIM_Base_SetConfig+0xb8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> main
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	615a      	str	r2, [r3, #20]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800

080029c0 <TIM_OC1_SetConfig>:
=======
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800

08002a60 <TIM_OC1_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
=======
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 0302 	bic.w	r3, r3, #2
 8002a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <TIM_OC1_SetConfig+0xc8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10c      	bne.n	8002a36 <TIM_OC1_SetConfig+0x76>
=======
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 0302 	bic.w	r3, r3, #2
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <TIM_OC1_SetConfig+0xc8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <TIM_OC1_SetConfig+0x76>
>>>>>>> main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0308 	bic.w	r3, r3, #8
 8002a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <TIM_OC1_SetConfig+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <TIM_OC1_SetConfig+0xa2>
=======
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0308 	bic.w	r3, r3, #8
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <TIM_OC1_SetConfig+0xc8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d111      	bne.n	8002b02 <TIM_OC1_SetConfig+0xa2>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
=======
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00

08002a8c <TIM_OC2_SetConfig>:
=======
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00

08002b2c <TIM_OC2_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
=======
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0320 	bic.w	r3, r3, #32
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <TIM_OC2_SetConfig+0xd0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10d      	bne.n	8002b08 <TIM_OC2_SetConfig+0x7c>
=======
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0210 	bic.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0320 	bic.w	r3, r3, #32
 8002b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <TIM_OC2_SetConfig+0xd0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10d      	bne.n	8002ba8 <TIM_OC2_SetConfig+0x7c>
>>>>>>> main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b06:	617b      	str	r3, [r7, #20]
=======
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba6:	617b      	str	r3, [r7, #20]
>>>>>>> main

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <TIM_OC2_SetConfig+0xd0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d113      	bne.n	8002b38 <TIM_OC2_SetConfig+0xac>
=======
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <TIM_OC2_SetConfig+0xd0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d113      	bne.n	8002bd8 <TIM_OC2_SetConfig+0xac>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
=======
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	40012c00 	.word	0x40012c00

08002b60 <TIM_OC3_SetConfig>:
=======
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	621a      	str	r2, [r3, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00

08002c00 <TIM_OC3_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
=======
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <TIM_OC3_SetConfig+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <TIM_OC3_SetConfig+0x7a>
=======
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0303 	bic.w	r3, r3, #3
 8002c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <TIM_OC3_SetConfig+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10d      	bne.n	8002c7a <TIM_OC3_SetConfig+0x7a>
>>>>>>> main
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <TIM_OC3_SetConfig+0xd0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d113      	bne.n	8002c0a <TIM_OC3_SetConfig+0xaa>
=======
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <TIM_OC3_SetConfig+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <TIM_OC3_SetConfig+0xaa>
>>>>>>> main
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
=======
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40012c00 	.word	0x40012c00

08002c34 <TIM_OC4_SetConfig>:
=======
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40012c00 	.word	0x40012c00

08002cd4 <TIM_OC4_SetConfig>:
>>>>>>> main
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
=======
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <TIM_OC4_SetConfig+0x98>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d109      	bne.n	8002ca8 <TIM_OC4_SetConfig+0x74>
=======
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	031b      	lsls	r3, r3, #12
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0f      	ldr	r2, [pc, #60]	; (8002d6c <TIM_OC4_SetConfig+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d109      	bne.n	8002d48 <TIM_OC4_SetConfig+0x74>
>>>>>>> main
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	019b      	lsls	r3, r3, #6
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
=======
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	019b      	lsls	r3, r3, #6
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
>>>>>>> main
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <TIM_TI1_ConfigInputStage>:
=======
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00

08002d70 <TIM_TI1_ConfigInputStage>:
>>>>>>> main
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
=======
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0201 	bic.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f023 030a 	bic.w	r3, r3, #10
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <TIM_TI2_ConfigInputStage>:
=======
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 030a 	bic.w	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_TI2_ConfigInputStage>:
>>>>>>> main
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
=======
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
>>>>>>> main
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 0210 	bic.w	r2, r3, #16
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <TIM_ITRx_SetConfig>:
=======
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 0210 	bic.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIM_ITRx_SetConfig>:
>>>>>>> main
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
=======
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f043 0307 	orr.w	r3, r3, #7
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ETR_SetConfig>:
=======
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0307 	orr.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ETR_SetConfig>:
>>>>>>> main
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002dbe:	b480      	push	{r7}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	021a      	lsls	r2, r3, #8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <TIM_CCxChannelCmd>:
=======
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_CCxChannelCmd>:
>>>>>>> main
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
=======
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2201      	movs	r2, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	401a      	ands	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2201      	movs	r2, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> main
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
=======
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
>>>>>>> main
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e046      	b.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
=======
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e046      	b.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d009      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10c      	bne.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
>>>>>>> main
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800

08002f00 <HAL_TIMEx_CommutCallback>:
=======
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800

08002fa0 <HAL_TIMEx_CommutCallback>:
>>>>>>> main
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
=======
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIMEx_BreakCallback>:
=======
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIMEx_BreakCallback>:
>>>>>>> main
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
=======
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
>>>>>>> main
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	2600      	movs	r6, #0
 8002f28:	4d0c      	ldr	r5, [pc, #48]	; (8002f5c <__libc_init_array+0x38>)
 8002f2a:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2c:	1b64      	subs	r4, r4, r5
 8002f2e:	10a4      	asrs	r4, r4, #2
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	f000 f822 	bl	8002f7c <_init>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	4d0a      	ldr	r5, [pc, #40]	; (8002f64 <__libc_init_array+0x40>)
 8002f3c:	4c0a      	ldr	r4, [pc, #40]	; (8002f68 <__libc_init_array+0x44>)
 8002f3e:	1b64      	subs	r4, r4, r5
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002fb4 	.word	0x08002fb4
 8002f60:	08002fb4 	.word	0x08002fb4
 8002f64:	08002fb4 	.word	0x08002fb4
 8002f68:	08002fb8 	.word	0x08002fb8

08002f6c <memset>:
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4402      	add	r2, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d100      	bne.n	8002f76 <memset+0xa>
 8002f74:	4770      	bx	lr
 8002f76:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7a:	e7f9      	b.n	8002f70 <memset+0x4>

08002f7c <_init>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr

08002f88 <_fini>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr
=======
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	4d0c      	ldr	r5, [pc, #48]	; (8002ffc <__libc_init_array+0x38>)
 8002fca:	4c0d      	ldr	r4, [pc, #52]	; (8003000 <__libc_init_array+0x3c>)
 8002fcc:	1b64      	subs	r4, r4, r5
 8002fce:	10a4      	asrs	r4, r4, #2
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	f000 f822 	bl	800301c <_init>
 8002fd8:	2600      	movs	r6, #0
 8002fda:	4d0a      	ldr	r5, [pc, #40]	; (8003004 <__libc_init_array+0x40>)
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <__libc_init_array+0x44>)
 8002fde:	1b64      	subs	r4, r4, r5
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	08003054 	.word	0x08003054
 8003000:	08003054 	.word	0x08003054
 8003004:	08003054 	.word	0x08003054
 8003008:	08003058 	.word	0x08003058

0800300c <memset>:
 800300c:	4603      	mov	r3, r0
 800300e:	4402      	add	r2, r0
 8003010:	4293      	cmp	r3, r2
 8003012:	d100      	bne.n	8003016 <memset+0xa>
 8003014:	4770      	bx	lr
 8003016:	f803 1b01 	strb.w	r1, [r3], #1
 800301a:	e7f9      	b.n	8003010 <memset+0x4>

0800301c <_init>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr

08003028 <_fini>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr
>>>>>>> main
